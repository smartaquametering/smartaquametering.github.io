// Color converting functions adapted from "CIE Color Calculator by Bruce Justin Lindbloom"
// - function Determinant3x3(m)
// - function MtxInvert3x3(m, i)
// - function MtxTranspose3x3(m)
// - function GetRefWhite(SelectedRefWhite)
// - function GetRGBModel(SelectedRGBModel)
// - function GetAdaptation(SelectedAdaptationMethod)
// - function CheckXYZ(XYZ)
// - function XYZ2RGB(XYZ)
// - function RGB2XYZ(RGB)
// - function Compand(linear)
// - function InvCompand(companded)
// - function XYZ2xyY(XYZ)
// - function XYZ2Lab(XYZ)
// - function XYZ2Luv(XYZ)
// - function Lab2LCHab(Lab)
// - function LCHab2Lab(LCHab)
// - function Luv2LCHuv(Luv)
// - function LCHuv2Luv(LCHuv)
// - function XYZ2CCT_Robertson(XYZ)
// - function XYZ2DominantWavelength(XYZ)
// http://www.brucelindbloom.com/index.html?ColorCalculator.html
// http://www.brucelindbloom.com/javascript/ColorConv.js
// Copyright © 2001 - 2021 Bruce Justin Lindbloom. All Rights Reserved.
//
// Color delta functions adapted from "CIE-L*a*b* Color Difference Calculator by Bruce Justin Lindbloom"
// - function DeltaE1976(Lab1, Lab2)
// - function DeltaE1994(Lab1, Lab2)
// - function DeltaE2000(Lab1, Lab2)
// - function DeltaECMC(L, C)
// http://www.brucelindbloom.com/index.html?ColorDifferenceCalc.html
// http://www.brucelindbloom.com/javascript/ColorDiff.js
// Copyright © 2001 - 2021 Bruce Justin Lindbloom. All Rights Reserved.
//
// Functions by smartAquaMetering
// - function RGB2Hex({R, G, B})
// - function ChromaticAdaptationXYZ(XYZ)
// - function XYZ2HunterLab(XYZ)
// - function XYZ2CCT_McCamy(XYZ)
// smartColorimeter - Copyright © 2020-2021 by smartAquaMetering. All Rights Reserved. Licensed under GNU GPL v3 or higher..
// Based on a work at https://github.com/smartaquametering/smartPhotometer.
// For permissions beyond the scope of this license see https://github.com/smartaquametering/smartPhotometer/blob/main/LICENSE.
//
// Other useful staff:
// https://css-tricks.com/converting-color-spaces-in-javascript/ by Jon Kantner
// https://automeris.io/WebPlotDigitizer, Copyright 2010-2020 by Ankit Rohatgi <ankitrohatgi@hotmail.com>

var kE = 216.0 / 24389.0;
var kK = 24389.0 / 27.0;
var kKE = 8.0;

var SourceWhite = {};
var RefWhite = {};
var RGBModel = {};
var AdaptationMethod;

var MtxRGB2XYZ = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
var MtxXYZ2RGB = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
var MtxToRGB = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
var MtxFromRGB = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
var MtxAdaptMa = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
var MtxAdaptMaI = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};

var WaveLengthIncrement = 5.0;

// Spectral Tristimulus Values (Color-Matching Functions) x¯ , y¯ , z¯ of the
// CIE 1931 Standard (2°) Observer (CIE 15.3:2004, ASTM E308−18)
//
// 360nm to 830nm in 5nm wavelength increments
//
var CIE1931StandardObserver = {
	360: [0.000129900000, 0.000003917000, 0.000606100000],
	365: [0.000232100000, 0.000006965000, 0.001086000000],
	370: [0.000414900000, 0.000012390000, 0.001946000000],
	375: [0.000741600000, 0.000022020000, 0.003486000000],
	380: [0.001368000000, 0.000039000000, 0.006450001000],
	385: [0.002236000000, 0.000064000000, 0.010549990000],
	390: [0.004243000000, 0.000120000000, 0.020050010000],
	395: [0.007650000000, 0.000217000000, 0.036210000000],
	400: [0.014310000000, 0.000396000000, 0.067850010000],
	405: [0.023190000000, 0.000640000000, 0.110200000000],
	410: [0.043510000000, 0.001210000000, 0.207400000000],
	415: [0.077630000000, 0.002180000000, 0.371300000000],
	420: [0.134380000000, 0.004000000000, 0.645600000000],
	425: [0.214770000000, 0.007300000000, 1.039050100000],
	430: [0.283900000000, 0.011600000000, 1.385600000000],
	435: [0.328500000000, 0.016840000000, 1.622960000000],
	440: [0.348280000000, 0.023000000000, 1.747060000000],
	445: [0.348060000000, 0.029800000000, 1.782600000000],
	450: [0.336200000000, 0.038000000000, 1.772110000000],
	455: [0.318700000000, 0.048000000000, 1.744100000000],
	460: [0.290800000000, 0.060000000000, 1.669200000000],
	465: [0.251100000000, 0.073900000000, 1.528100000000],
	470: [0.195360000000, 0.090980000000, 1.287640000000],
	475: [0.142100000000, 0.112600000000, 1.041900000000],
	480: [0.095640000000, 0.139020000000, 0.812950100000],
	485: [0.057950010000, 0.169300000000, 0.616200000000],
	490: [0.032010000000, 0.208020000000, 0.465180000000],
	495: [0.014700000000, 0.258600000000, 0.353300000000],
	500: [0.004900000000, 0.323000000000, 0.272000000000],
	505: [0.002400000000, 0.407300000000, 0.212300000000],
	510: [0.009300000000, 0.503000000000, 0.158200000000],
	515: [0.029100000000, 0.608200000000, 0.111700000000],
	520: [0.063270000000, 0.710000000000, 0.078249990000],
	525: [0.109600000000, 0.793200000000, 0.057250010000],
	530: [0.165500000000, 0.862000000000, 0.042160000000],
	535: [0.225749900000, 0.914850100000, 0.029840000000],
	540: [0.290400000000, 0.954000000000, 0.020300000000],
	545: [0.359700000000, 0.980300000000, 0.013400000000],
	550: [0.433449900000, 0.994950100000, 0.008749999000],
	555: [0.512050100000, 1.000000000000, 0.005749999000],
	560: [0.594500000000, 0.995000000000, 0.003900000000],
	565: [0.678400000000, 0.978600000000, 0.002749999000],
	570: [0.762100000000, 0.952000000000, 0.002100000000],
	575: [0.842500000000, 0.915400000000, 0.001800000000],
	580: [0.916300000000, 0.870000000000, 0.001650001000],
	585: [0.978600000000, 0.816300000000, 0.001400000000],
	590: [1.026300000000, 0.757000000000, 0.001100000000],
	595: [1.056700000000, 0.694900000000, 0.001000000000],
	600: [1.062200000000, 0.631000000000, 0.000800000000],
	605: [1.045600000000, 0.566800000000, 0.000600000000],
	610: [1.002600000000, 0.503000000000, 0.000340000000],
	615: [0.938400000000, 0.441200000000, 0.000240000000],
	620: [0.854449900000, 0.381000000000, 0.000190000000],
	625: [0.751400000000, 0.321000000000, 0.000100000000],
	630: [0.642400000000, 0.265000000000, 0.000049999990],
	635: [0.541900000000, 0.217000000000, 0.000030000000],
	640: [0.447900000000, 0.175000000000, 0.000020000000],
	645: [0.360800000000, 0.138200000000, 0.000010000000],
	650: [0.283500000000, 0.107000000000, 0.000000000000],
	655: [0.218700000000, 0.081600000000, 0.000000000000],
	660: [0.164900000000, 0.061000000000, 0.000000000000],
	665: [0.121200000000, 0.044580000000, 0.000000000000],
	670: [0.087400000000, 0.032000000000, 0.000000000000],
	675: [0.063600000000, 0.023200000000, 0.000000000000],
	680: [0.046770000000, 0.017000000000, 0.000000000000],
	685: [0.032900000000, 0.011920000000, 0.000000000000],
	690: [0.022700000000, 0.008210000000, 0.000000000000],
	695: [0.015840000000, 0.005723000000, 0.000000000000],
	700: [0.011359160000, 0.004102000000, 0.000000000000],
	705: [0.008110916000, 0.002929000000, 0.000000000000],
	710: [0.005790346000, 0.002091000000, 0.000000000000],
	715: [0.004109457000, 0.001484000000, 0.000000000000],
	720: [0.002899327000, 0.001047000000, 0.000000000000],
	725: [0.002049190000, 0.000740000000, 0.000000000000],
	730: [0.001439971000, 0.000520000000, 0.000000000000],
	735: [0.000999949300, 0.000361100000, 0.000000000000],
	740: [0.000690078600, 0.000249200000, 0.000000000000],
	745: [0.000476021300, 0.000171900000, 0.000000000000],
	750: [0.000332301100, 0.000120000000, 0.000000000000],
	755: [0.000234826100, 0.000084800000, 0.000000000000],
	760: [0.000166150500, 0.000060000000, 0.000000000000],
	765: [0.000117413000, 0.000042400000, 0.000000000000],
	770: [0.000083075270, 0.000030000000, 0.000000000000],
	775: [0.000058706520, 0.000021200000, 0.000000000000],
	780: [0.000041509940, 0.000014990000, 0.000000000000],
	785: [0.000029353260, 0.000010600000, 0.000000000000],
	790: [0.000020673830, 0.000007465700, 0.000000000000],
	795: [0.000014559770, 0.000005257800, 0.000000000000],
	800: [0.000010253980, 0.000003702900, 0.000000000000],
	805: [0.000007221456, 0.000002607800, 0.000000000000],
	810: [0.000005085868, 0.000001836600, 0.000000000000],
	815: [0.000003581652, 0.000001293400, 0.000000000000],
	820: [0.000002522525, 0.000000910930, 0.000000000000],
	825: [0.000001776509, 0.000000641530, 0.000000000000],
	830: [0.000001251141, 0.000000451810, 0.000000000000]
};

// Spectral Tristimulus Values (Color-Matching Functions) x¯ , y¯ , z¯ of the
// CIE 1964 Standard (10°) Observer (CIE 15.3:2004, ASTM E308−18)
//
// 360nm to 830nm in 5nm wavelength increments
//
var CIE1964StandardObserver = {
	360: [0.000000122200, 0.000000013398, 0.000000535027],
	365: [0.000000919270, 0.000000100650, 0.000004028300],
	370: [0.000005958600, 0.000000651100, 0.000026143700],
	375: [0.000033266000, 0.000003625000, 0.000146220000],
	380: [0.000159952000, 0.000017364000, 0.000704776000],
	385: [0.000662440000, 0.000071560000, 0.002927800000],
	390: [0.002361600000, 0.000253400000, 0.010482200000],
	395: [0.007242300000, 0.000768500000, 0.032344000000],
	400: [0.019109700000, 0.002004400000, 0.086010900000],
	405: [0.043400000000, 0.004509000000, 0.197120000000],
	410: [0.084736000000, 0.008756000000, 0.389366000000],
	415: [0.140638000000, 0.014456000000, 0.656760000000],
	420: [0.204492000000, 0.021391000000, 0.972542000000],
	425: [0.264737000000, 0.029497000000, 1.282500000000],
	430: [0.314679000000, 0.038676000000, 1.553480000000],
	435: [0.357719000000, 0.049602000000, 1.798500000000],
	440: [0.383734000000, 0.062077000000, 1.967280000000],
	445: [0.386726000000, 0.074704000000, 2.027300000000],
	450: [0.370702000000, 0.089456000000, 1.994800000000],
	455: [0.342957000000, 0.106256000000, 1.900700000000],
	460: [0.302273000000, 0.128201000000, 1.745370000000],
	465: [0.254085000000, 0.152761000000, 1.554900000000],
	470: [0.195618000000, 0.185190000000, 1.317560000000],
	475: [0.132349000000, 0.219940000000, 1.030200000000],
	480: [0.080507000000, 0.253589000000, 0.772125000000],
	485: [0.041072000000, 0.297665000000, 0.570060000000],
	490: [0.016172000000, 0.339133000000, 0.415254000000],
	495: [0.005132000000, 0.395379000000, 0.302356000000],
	500: [0.003816000000, 0.460777000000, 0.218502000000],
	505: [0.015444000000, 0.531360000000, 0.159249000000],
	510: [0.037465000000, 0.606741000000, 0.112044000000],
	515: [0.071358000000, 0.685660000000, 0.082248000000],
	520: [0.117749000000, 0.761757000000, 0.060709000000],
	525: [0.172953000000, 0.823330000000, 0.043050000000],
	530: [0.236491000000, 0.875211000000, 0.030451000000],
	535: [0.304213000000, 0.923810000000, 0.020584000000],
	540: [0.376772000000, 0.961988000000, 0.013676000000],
	545: [0.451584000000, 0.982200000000, 0.007918000000],
	550: [0.529826000000, 0.991761000000, 0.003988000000],
	555: [0.616053000000, 0.999110000000, 0.001091000000],
	560: [0.705224000000, 0.997340000000, 0.000000000000],
	565: [0.793832000000, 0.982380000000, 0.000000000000],
	570: [0.878655000000, 0.955552000000, 0.000000000000],
	575: [0.951162000000, 0.915175000000, 0.000000000000],
	580: [1.014160000000, 0.868934000000, 0.000000000000],
	585: [1.074300000000, 0.825623000000, 0.000000000000],
	590: [1.118520000000, 0.777405000000, 0.000000000000],
	595: [1.134300000000, 0.720353000000, 0.000000000000],
	600: [1.123990000000, 0.658341000000, 0.000000000000],
	605: [1.089100000000, 0.593878000000, 0.000000000000],
	610: [1.030480000000, 0.527963000000, 0.000000000000],
	615: [0.950740000000, 0.461834000000, 0.000000000000],
	620: [0.856297000000, 0.398057000000, 0.000000000000],
	625: [0.754930000000, 0.339554000000, 0.000000000000],
	630: [0.647467000000, 0.283493000000, 0.000000000000],
	635: [0.535110000000, 0.228254000000, 0.000000000000],
	640: [0.431567000000, 0.179828000000, 0.000000000000],
	645: [0.343690000000, 0.140211000000, 0.000000000000],
	650: [0.268329000000, 0.107633000000, 0.000000000000],
	655: [0.204300000000, 0.081187000000, 0.000000000000],
	660: [0.152568000000, 0.060281000000, 0.000000000000],
	665: [0.112210000000, 0.044096000000, 0.000000000000],
	670: [0.081260600000, 0.031800400000, 0.000000000000],
	675: [0.057930000000, 0.022601700000, 0.000000000000],
	680: [0.040850800000, 0.015905100000, 0.000000000000],
	685: [0.028623000000, 0.011130300000, 0.000000000000],
	690: [0.019941300000, 0.007748800000, 0.000000000000],
	695: [0.013842000000, 0.005375100000, 0.000000000000],
	700: [0.009576880000, 0.003717740000, 0.000000000000],
	705: [0.006605200000, 0.002564560000, 0.000000000000],
	710: [0.004552630000, 0.001768470000, 0.000000000000],
	715: [0.003144700000, 0.001222390000, 0.000000000000],
	720: [0.002174960000, 0.000846190000, 0.000000000000],
	725: [0.001505700000, 0.000586440000, 0.000000000000],
	730: [0.001044760000, 0.000407410000, 0.000000000000],
	735: [0.000727450000, 0.000284041000, 0.000000000000],
	740: [0.000508258000, 0.000198730000, 0.000000000000],
	745: [0.000356380000, 0.000139550000, 0.000000000000],
	750: [0.000250969000, 0.000098428000, 0.000000000000],
	755: [0.000177730000, 0.000069819000, 0.000000000000],
	760: [0.000126390000, 0.000049737000, 0.000000000000],
	765: [0.000090151000, 0.000035540500, 0.000000000000],
	770: [0.000064525800, 0.000025486000, 0.000000000000],
	775: [0.000046339000, 0.000018338400, 0.000000000000],
	780: [0.000033411700, 0.000013249000, 0.000000000000],
	785: [0.000024209000, 0.000009619600, 0.000000000000],
	790: [0.000017611500, 0.000007012800, 0.000000000000],
	795: [0.000012855000, 0.000005129800, 0.000000000000],
	800: [0.000009413630, 0.000003764730, 0.000000000000],
	805: [0.000006913000, 0.000002770810, 0.000000000000],
	810: [0.000005093470, 0.000002046130, 0.000000000000],
	815: [0.000003767100, 0.000001516770, 0.000000000000],
	820: [0.000002795310, 0.000001128090, 0.000000000000],
	825: [0.000002082000, 0.000000842160, 0.000000000000],
	830: [0.000001553140, 0.000000629700, 0.000000000000]
};

// Relative Spectral Power Distribution [SPD) functions
// S0(λ) (blue), S1(λ) (green) and S2(λ) (red)
// for CIE Standard Illuminant D-series
// https://github.com/colour-science/colour/blob/develop/colour/colorimetry/datasets/illuminants/sds_d_illuminant_series.py
// http://www.brucelindbloom.com/Eqn_DIlluminant.html
// 
// 300nm to 830nm in 5nm wavelength increments
//
var SPD_CIE_Illuminant_D_Series = {
	300: [  0.04,   0.02,  0.00],
	305: [  3.02,   2.26,  1.00],
	310: [  6.00,   4.50,  2.00],
	315: [ 17.80,  13.45,  3.00],
	320: [ 29.60,  22.40,  4.00],
	325: [ 42.45,  32.20,  6.25],
	330: [ 55.30,  42.00,  8.50],
	335: [ 56.30,  41.30,  8.15],
	340: [ 57.30,  40.60,  7.80],
	345: [ 59.55,  41.10,  7.25],
	350: [ 61.80,  41.60,  6.70],
	355: [ 61.65,  39.80,  6.00],
	360: [ 61.50,  38.00,  5.30],
	365: [ 65.15,  40.20,  5.70],
	370: [ 68.80,  42.40,  6.10],
	375: [ 66.10,  40.45,  4.55],
	380: [ 63.40,  38.50,  3.00],
	385: [ 64.60,  36.75,  2.10],
	390: [ 65.80,  35.00,  1.20],
	395: [ 80.30,  39.20,  0.05],
	400: [ 94.80,  43.40, -1.10],
	405: [ 99.80,  44.85, -0.80],
	410: [104.80,  46.30, -0.50],
	415: [105.35,  45.10, -0.60],
	420: [105.90,  43.90, -0.70],
	425: [101.35,  40.50, -0.95],
	430: [ 96.80,  37.10, -1.20],
	435: [105.35,  36.90, -1.90],
	440: [113.90,  36.70, -2.60],
	445: [119.75,  36.30, -2.75],
	450: [125.60,  35.90, -2.90],
	455: [125.55,  34.25, -2.85],
	460: [125.50,  32.60, -2.80],
	465: [123.40,  30.25, -2.70],
	470: [121.30,  27.90, -2.60],
	475: [121.30,  26.10, -2.60],
	480: [121.30,  24.30, -2.60],
	485: [117.40,  22.20, -2.20],
	490: [113.50,  20.10, -1.80],
	495: [113.30,  18.15, -1.65],
	500: [113.10,  16.20, -1.50],
	505: [111.95,  14.70, -1.40],
	510: [110.80,  13.20, -1.30],
	515: [108.65,  10.90, -1.25],
	520: [106.50,   8.60, -1.20],
	525: [107.65,   7.35, -1.10],
	530: [108.80,   6.10, -1.00],
	535: [107.05,   5.15, -0.75],
	540: [105.30,   4.20, -0.50],
	545: [104.85,   3.05, -0.40],
	550: [104.40,   1.90, -0.30],
	555: [102.20,   0.95, -0.15],
	560: [100.00,   0.00,  0.00],
	565: [ 98.00,  -0.80,  0.10],
	570: [ 96.00,  -1.60,  0.20],
	575: [ 95.55,  -2.55,  0.35],
	580: [ 95.10,  -3.50,  0.50],
	585: [ 92.10,  -3.50,  1.30],
	590: [ 89.10,  -3.50,  2.10],
	595: [ 89.80,  -4.65,  2.65],
	600: [ 90.50,  -5.80,  3.20],
	605: [ 90.40,  -6.50,  3.65],
	610: [ 90.30,  -7.20,  4.10],
	615: [ 89.35,  -7.90,  4.40],
	620: [ 88.40,  -8.60,  4.70],
	625: [ 86.20,  -9.05,  4.90],
	630: [ 84.00,  -9.50,  5.10],
	635: [ 84.55, -10.20,  5.90],
	640: [ 85.10, -10.90,  6.70],
	645: [ 83.50, -10.80,  7.00],
	650: [ 81.90, -10.70,  7.30],
	655: [ 82.25, -11.35,  7.95],
	660: [ 82.60, -12.00,  8.60],
	665: [ 83.75, -13.00,  9.20],
	670: [ 84.90, -14.00,  9.80],
	675: [ 83.10, -13.80, 10.00],
	680: [ 81.30, -13.60, 10.20],
	685: [ 76.60, -12.80,  9.25],
	690: [ 71.90, -12.00,  8.30],
	695: [ 73.10, -12.65,  8.95],
	700: [ 74.30, -13.30,  9.60],
	705: [ 75.35, -13.10,  9.05],
	710: [ 76.40, -12.90,  8.50],
	715: [ 69.85, -11.75,  7.75],
	720: [ 63.30, -10.60,  7.00],
	725: [ 67.50, -11.10,  7.30],
	730: [ 71.70, -11.60,  7.60],
	735: [ 74.35, -11.90,  7.80],
	740: [ 77.00, -12.20,  8.00],
	745: [ 71.10, -11.20,  7.35],
	750: [ 65.20, -10.20,  6.70],
	755: [ 56.45,  -9.00,  5.95],
	760: [ 47.70,  -7.80,  5.20],
	765: [ 58.15,  -9.50,  6.30],
	770: [ 68.60, -11.20,  7.40],
	775: [ 66.80, -10.80,  7.10],
	780: [ 65.00, -10.40,  6.80],
	785: [ 65.50, -10.50,  6.90],
	790: [ 66.00, -10.60,  7.00],
	795: [ 63.50, -10.15,  6.70],
	800: [ 61.00,  -9.70,  6.40],
	805: [ 57.15,  -9.00,  5.95],
	810: [ 53.30,  -8.30,  5.50],
	815: [ 56.10,  -8.80,  5.80],
	820: [ 58.90,  -9.30,  6.10],
	825: [ 60.40,  -9.55,  6.30],
	830: [ 61.90,  -9.80,  6.50]
};

// Relative Spectral Power Distributions (SPD) S(λ) of 
// CIE Standard Illuminants A, C, D50, D55, D65, and D75 (CIE 15.3:2004, ASTM E308−18)
//
// 300nm to 830nm in 5nm wavelength increments
//
var SPD_CIE_Illuminant_A = {
	200: 0.000000,
	300: 0.930483,
	305: 1.128210,
	310: 1.357690,
	315: 1.622190,
	320: 1.925080,
	325: 2.269800,
	330: 2.659810,
	335: 3.098610,
	340: 3.589680,
	345: 4.136480,
	350: 4.742380,
	355: 5.410700,
	360: 6.144620,
	365: 6.947200,
	370: 7.821350,
	375: 8.769800,
	380: 9.795100,
	385: 10.899600,
	390: 12.085300,
	395: 13.354300,
	400: 14.708000,
	405: 16.148000,
	410: 17.675300,
	415: 19.290700,
	420: 20.995000,
	425: 22.788300,
	430: 24.670900,
	435: 26.642500,
	440: 28.702700,
	445: 30.850800,
	450: 33.085900,
	455: 35.406800,
	460: 37.812100,
	465: 40.300200,
	470: 42.869300,
	475: 45.517400,
	480: 48.242300,
	485: 51.041800,
	490: 53.913200,
	495: 56.853900,
	500: 59.861100,
	505: 62.932000,
	510: 66.063500,
	515: 69.252500,
	520: 72.495900,
	525: 75.790300,
	530: 79.132600,
	535: 82.519300,
	540: 85.947000,
	545: 89.412400,
	550: 92.912000,
	555: 96.442300,
	560: 100.000000,
	565: 103.582000,
	570: 107.184000,
	575: 110.803000,
	580: 114.436000,
	585: 118.080000,
	590: 121.731000,
	595: 125.386000,
	600: 129.043000,
	605: 132.697000,
	610: 136.346000,
	615: 139.988000,
	620: 143.618000,
	625: 147.235000,
	630: 150.836000,
	635: 154.418000,
	640: 157.979000,
	645: 161.516000,
	650: 165.028000,
	655: 168.510000,
	660: 171.963000,
	665: 175.383000,
	670: 178.769000,
	675: 182.118000,
	680: 185.429000,
	685: 188.701000,
	690: 191.931000,
	695: 195.118000,
	700: 198.261000,
	705: 201.359000,
	710: 204.409000,
	715: 207.411000,
	720: 210.365000,
	725: 213.268000,
	730: 216.120000,
	735: 218.920000,
	740: 221.667000,
	745: 224.361000,
	750: 227.000000,
	755: 229.585000,
	760: 232.115000,
	765: 234.589000,
	770: 237.008000,
	775: 239.370000,
	780: 241.675000,
	785: 243.924000,
	790: 246.116000,
	795: 248.251000,
	800: 250.329000,
	805: 252.350000,
	810: 254.314000,
	815: 256.221000,
	820: 258.071000,
	825: 259.865000,
	830: 261.602000
};

var SPD_CIE_Illuminant_C = {
	200: 0.000000,
	300: 0.000000,
	305: 0.000000,
	310: 0.000000,
	315: 0.000000,
	320: 0.010000,
	325: 0.200000,
	330: 0.400000,
	335: 1.550000,
	340: 2.700000,
	345: 4.850000,
	350: 7.000000,
	355: 9.950000,
	360: 12.900000,
	365: 17.200000,
	370: 21.400000,
	375: 27.500000,
	380: 33.000000,
	385: 39.920000,
	390: 47.400000,
	395: 55.170000,
	400: 63.300000,
	405: 71.810000,
	410: 80.600000,
	415: 89.530000,
	420: 98.100000,
	425: 105.800000,
	430: 112.400000,
	435: 117.750000,
	440: 121.500000,
	445: 123.450000,
	450: 124.000000,
	455: 123.600000,
	460: 123.100000,
	465: 123.300000,
	470: 123.800000,
	475: 124.090000,
	480: 123.900000,
	485: 122.920000,
	490: 120.700000,
	495: 116.900000,
	500: 112.100000,
	505: 106.980000,
	510: 102.300000,
	515: 98.810000,
	520: 96.900000,
	525: 96.780000,
	530: 98.000000,
	535: 99.940000,
	540: 102.100000,
	545: 103.950000,
	550: 105.200000,
	555: 105.670000,
	560: 105.300000,
	565: 104.110000,
	570: 102.300000,
	575: 100.150000,
	580: 97.800000,
	585: 95.430000,
	590: 93.200000,
	595: 91.220000,
	600: 89.700000,
	605: 88.830000,
	610: 88.400000,
	615: 88.190000,
	620: 88.100000,
	625: 88.060000,
	630: 88.000000,
	635: 87.860000,
	640: 87.800000,
	645: 87.990000,
	650: 88.200000,
	655: 88.200000,
	660: 87.900000,
	665: 87.220000,
	670: 86.300000,
	675: 85.300000,
	680: 84.000000,
	685: 82.210000,
	690: 80.200000,
	695: 78.240000,
	700: 76.300000,
	705: 74.360000,
	710: 72.400000,
	715: 70.400000,
	720: 68.300000,
	725: 66.300000,
	730: 64.400000,
	735: 62.800000,
	740: 61.500000,
	745: 60.200000,
	750: 59.200000,
	755: 58.500000,
	760: 58.100000,
	765: 58.000000,
	770: 58.200000,
	775: 58.500000,
	780: 59.100000,
	785: 78.910000,
	790: 79.550000,
	795: 76.480000,
	800: 73.400000,
	805: 68.660000,
	810: 63.920000,
	815: 67.350000,
	820: 70.780000,
	825: 72.610000,
	830: 74.440000
};

var SPD_CIE_Illuminant_D50 = {
	200: 0.000000,
	300: 0.019000,
	305: 1.035000,
	310: 2.051000,
	315: 4.914000,
	320: 7.778000,
	325: 11.263000,
	330: 14.748000,
	335: 16.348000,
	340: 17.948000,
	345: 19.479000,
	350: 21.010000,
	355: 22.476000,
	360: 23.942000,
	365: 25.451000,
	370: 26.961000,
	375: 25.724000,
	380: 24.488000,
	385: 27.179000,
	390: 29.871000,
	395: 39.589000,
	400: 49.308000,
	405: 52.910000,
	410: 56.513000,
	415: 58.273000,
	420: 60.034000,
	425: 58.926000,
	430: 57.818000,
	435: 66.321000,
	440: 74.825000,
	445: 81.036000,
	450: 87.247000,
	455: 88.930000,
	460: 90.612000,
	465: 90.990000,
	470: 91.368000,
	475: 93.238000,
	480: 95.109000,
	485: 93.536000,
	490: 91.963000,
	495: 93.843000,
	500: 95.724000,
	505: 96.169000,
	510: 96.613000,
	515: 96.871000,
	520: 97.129000,
	525: 99.614000,
	530: 102.099000,
	535: 101.427000,
	540: 100.755000,
	545: 101.536000,
	550: 102.317000,
	555: 101.159000,
	560: 100.000000,
	565: 98.868000,
	570: 97.735000,
	575: 98.327000,
	580: 98.918000,
	585: 96.208000,
	590: 93.499000,
	595: 95.593000,
	600: 97.688000,
	605: 98.478000,
	610: 99.269000,
	615: 99.155000,
	620: 99.042000,
	625: 97.382000,
	630: 95.722000,
	635: 97.290000,
	640: 98.857000,
	645: 97.262000,
	650: 95.667000,
	655: 96.929000,
	660: 98.190000,
	665: 100.597000,
	670: 103.003000,
	675: 101.068000,
	680: 99.133000,
	685: 93.257000,
	690: 87.381000,
	695: 89.492000,
	700: 91.604000,
	705: 92.246000,
	710: 92.889000,
	715: 84.872000,
	720: 76.854000,
	725: 81.683000,
	730: 86.511000,
	735: 89.546000,
	740: 92.580000,
	745: 85.405000,
	750: 78.230000,
	755: 67.961000,
	760: 57.692000,
	765: 70.307000,
	770: 82.923000,
	775: 80.599000,
	780: 78.274000,
	785: 72.380000,
	790: 72.940000,
	795: 70.140000,
	800: 67.350000,
	805: 63.040000,
	810: 58.730000,
	815: 61.860000,
	820: 64.990000,
	825: 66.650000,
	830: 68.310000
};

var SPD_CIE_Illuminant_D55 = {
	200: 0.000000,
	300: 0.024000,
	305: 1.048000,
	310: 2.072000,
	315: 6.648000,
	320: 11.224000,
	325: 15.936000,
	330: 20.647000,
	335: 22.266000,
	340: 23.885000,
	345: 25.851000,
	350: 27.817000,
	355: 29.219000,
	360: 30.621000,
	365: 32.464000,
	370: 34.308000,
	375: 33.446000,
	380: 32.584000,
	385: 35.335000,
	390: 38.087000,
	395: 49.518000,
	400: 60.949000,
	405: 64.751000,
	410: 68.554000,
	415: 70.065000,
	420: 71.577000,
	425: 69.746000,
	430: 67.914000,
	435: 76.760000,
	440: 85.605000,
	445: 91.799000,
	450: 97.993000,
	455: 99.228000,
	460: 100.463000,
	465: 100.188000,
	470: 99.913000,
	475: 101.326000,
	480: 102.739000,
	485: 100.409000,
	490: 98.078000,
	495: 99.379000,
	500: 100.680000,
	505: 100.688000,
	510: 100.695000,
	515: 100.341000,
	520: 99.987000,
	525: 102.098000,
	530: 104.210000,
	535: 103.156000,
	540: 102.102000,
	545: 102.535000,
	550: 102.968000,
	555: 101.484000,
	560: 100.000000,
	565: 98.608000,
	570: 97.216000,
	575: 97.482000,
	580: 97.749000,
	585: 94.590000,
	590: 91.432000,
	595: 92.926000,
	600: 94.419000,
	605: 94.780000,
	610: 95.140000,
	615: 94.680000,
	620: 94.220000,
	625: 92.334000,
	630: 90.448000,
	635: 91.389000,
	640: 92.330000,
	645: 90.592000,
	650: 88.854000,
	655: 89.586000,
	660: 90.317000,
	665: 92.133000,
	670: 93.950000,
	675: 91.953000,
	680: 89.956000,
	685: 84.817000,
	690: 79.677000,
	695: 81.258000,
	700: 82.840000,
	705: 83.842000,
	710: 84.844000,
	715: 77.539000,
	720: 70.235000,
	725: 74.768000,
	730: 79.301000,
	735: 82.147000,
	740: 84.993000,
	745: 78.437000,
	750: 71.880000,
	755: 62.337000,
	760: 52.793000,
	765: 64.360000,
	770: 75.927000,
	775: 73.872000,
	780: 71.818000,
	785: 63.840000,
	790: 64.300000,
	795: 61.880000,
	800: 59.450000,
	805: 55.710000,
	810: 51.960000,
	815: 54.700000,
	820: 57.440000,
	825: 58.880000,
	830: 60.310000
};

var SPD_CIE_Illuminant_D65 = {
	200: 0.000000,
	300: 0.034100,
	305: 1.664300,
	310: 3.294500,
	315: 11.765200,
	320: 20.236000,
	325: 28.644700,
	330: 37.053500,
	335: 38.501100,
	340: 39.948800,
	345: 42.430200,
	350: 44.911700,
	355: 45.775000,
	360: 46.638300,
	365: 49.363700,
	370: 52.089100,
	375: 51.032300,
	380: 49.975500,
	385: 52.311800,
	390: 54.648200,
	395: 68.701500,
	400: 82.754900,
	405: 87.120400,
	410: 91.486000,
	415: 92.458900,
	420: 93.431800,
	425: 90.057000,
	430: 86.682300,
	435: 95.773600,
	440: 104.865000,
	445: 110.936000,
	450: 117.008000,
	455: 117.410000,
	460: 117.812000,
	465: 116.336000,
	470: 114.861000,
	475: 115.392000,
	480: 115.923000,
	485: 112.367000,
	490: 108.811000,
	495: 109.082000,
	500: 109.354000,
	505: 108.578000,
	510: 107.802000,
	515: 106.296000,
	520: 104.790000,
	525: 106.239000,
	530: 107.689000,
	535: 106.047000,
	540: 104.405000,
	545: 104.225000,
	550: 104.046000,
	555: 102.023000,
	560: 100.000000,
	565: 98.167100,
	570: 96.334200,
	575: 96.061100,
	580: 95.788000,
	585: 92.236800,
	590: 88.685600,
	595: 89.345900,
	600: 90.006200,
	605: 89.802600,
	610: 89.599100,
	615: 88.648900,
	620: 87.698700,
	625: 85.493600,
	630: 83.288600,
	635: 83.493900,
	640: 83.699200,
	645: 81.863000,
	650: 80.026800,
	655: 80.120700,
	660: 80.214600,
	665: 81.246200,
	670: 82.277800,
	675: 80.281000,
	680: 78.284200,
	685: 74.002700,
	690: 69.721300,
	695: 70.665200,
	700: 71.609100,
	705: 72.979000,
	710: 74.349000,
	715: 67.976500,
	720: 61.604000,
	725: 65.744800,
	730: 69.885600,
	735: 72.486300,
	740: 75.087000,
	745: 69.339800,
	750: 63.592700,
	755: 55.005400,
	760: 46.418200,
	765: 56.611800,
	770: 66.805400,
	775: 65.094100,
	780: 63.382800,
	785: 63.843400,
	790: 64.304000,
	795: 61.877900,
	800: 59.451900,
	805: 55.705400,
	810: 51.959000,
	815: 54.699800,
	820: 57.440600,
	825: 58.876500,
	830: 60.312500
};

var SPD_CIE_Illuminant_D75 = {
	200: 0.000000,
	300: 0.043000,
	305: 2.588000,
	310: 5.133000,
	315: 17.470000,
	320: 29.808000,
	325: 42.369000,
	330: 54.930000,
	335: 56.095000,
	340: 57.259000,
	345: 60.000000,
	350: 62.740000,
	355: 62.861000,
	360: 62.982000,
	365: 66.647000,
	370: 70.312000,
	375: 68.507000,
	380: 66.703000,
	385: 68.333000,
	390: 69.963000,
	395: 85.946000,
	400: 101.929000,
	405: 106.911000,
	410: 111.894000,
	415: 112.346000,
	420: 112.798000,
	425: 107.945000,
	430: 103.092000,
	435: 112.145000,
	440: 121.198000,
	445: 127.104000,
	450: 133.010000,
	455: 132.682000,
	460: 132.355000,
	465: 129.838000,
	470: 127.322000,
	475: 127.061000,
	480: 126.800000,
	485: 122.291000,
	490: 117.783000,
	495: 117.186000,
	500: 116.589000,
	505: 115.146000,
	510: 113.702000,
	515: 111.181000,
	520: 108.659000,
	525: 109.552000,
	530: 110.445000,
	535: 108.367000,
	540: 106.289000,
	545: 105.596000,
	550: 104.904000,
	555: 102.452000,
	560: 100.000000,
	565: 97.808000,
	570: 95.616000,
	575: 94.914000,
	580: 94.213000,
	585: 90.605000,
	590: 86.997000,
	595: 87.112000,
	600: 87.227000,
	605: 86.684000,
	610: 86.140000,
	615: 84.861000,
	620: 83.581000,
	625: 81.164000,
	630: 78.747000,
	635: 78.587000,
	640: 78.428000,
	645: 76.614000,
	650: 74.801000,
	655: 74.562000,
	660: 74.324000,
	665: 74.873000,
	670: 75.422000,
	675: 73.499000,
	680: 71.576000,
	685: 67.714000,
	690: 63.852000,
	695: 64.464000,
	700: 65.076000,
	705: 66.573000,
	710: 68.070000,
	715: 62.256000,
	720: 56.443000,
	725: 60.343000,
	730: 64.242000,
	735: 66.697000,
	740: 69.151000,
	745: 63.890000,
	750: 58.629000,
	755: 50.623000,
	760: 42.617000,
	765: 51.985000,
	770: 61.352000,
	775: 59.838000,
	780: 58.324000,
	785: 66.697000,
	790: 69.151000,
	795: 63.890000,
	800: 58.629000,
	805: 50.623000,
	810: 42.617000,
	815: 51.985000,
	820: 61.352000,
	825: 59.838000,
	830: 58.324000
};

// Relative Spectral Power Distributions (SPD) S(λ) of
// - White,
// - Warm-White,
// - UVA and
// - IR
// Light Emitting Diodes (LEDs))
//
// Notes: https://hitentechno.com/low-voltage-halogen-lamps-medical-lamps-xenon-spectral.php
//        https://www.elkid.org/pdf/Philips_halogen_lamps.pdf
//
// 300nm to 830nm in 5nm wavelength increments
//
var SPD_Nichia_NSPW500DS = {
	200: 0.000000,
	300: 0.000000,
	305: 0.000000,
	310: 0.000000,
	315: 0.000000,
	320: 0.000000,
	325: 0.000000,
	330: 0.127551,
	335: 0.127551,
	340: 0.127551,
	345: 0.127551,
	350: 0.127551,
	355: 0.255102,
	360: 0.255102,
	365: 0.255102,
	370: 0.255102,
	375: 0.255102,
	380: 0.510204,
	385: 0.510204,
	390: 0.510204,
	395: 0.765306,
	400: 0.765306,
	405: 1.020408,
	410: 1.275510,
	415: 2.040816,
	420: 3.316327,
	425: 6.887755,
	430: 13.520408,
	435: 25.510204,
	440: 46.428571,
	445: 80.357143,
	450: 137.244898,
	455: 213.010204,
	460: 254.336735,
	465: 215.051020,
	470: 152.295918,
	475: 114.540816,
	480: 88.520408,
	485: 66.326531,
	490: 54.081633,
	495: 47.193878,
	500: 44.642857,
	505: 47.193878,
	510: 52.551020,
	515: 60.714286,
	520: 69.132653,
	525: 76.275510,
	530: 82.908163,
	535: 88.010204,
	540: 94.387755,
	545: 96.428571,
	550: 98.214286,
	555: 99.234694,
	560: 100.000000,
	565: 100.000000,
	570: 99.234694,
	575: 97.959184,
	580: 95.918367,
	585: 94.642857,
	590: 92.602041,
	595: 88.010204,
	600: 86.224490,
	605: 82.142857,
	610: 78.061224,
	615: 73.724490,
	620: 70.153061,
	625: 65.561224,
	630: 61.224490,
	635: 56.122449,
	640: 51.785714,
	645: 48.724490,
	650: 44.642857,
	655: 40.561224,
	660: 36.989796,
	665: 33.163265,
	670: 30.357143,
	675: 27.295918,
	680: 24.489796,
	685: 21.683673,
	690: 19.642857,
	695: 17.602041,
	700: 15.561224,
	705: 14.285714,
	710: 12.755102,
	715: 10.969388,
	720: 9.693878,
	725: 9.183673,
	730: 7.908163,
	735: 6.377551,
	740: 6.122449,
	745: 5.612245,
	750: 5.102041,
	755: 4.081633,
	760: 4.081633,
	765: 3.316327,
	770: 3.316327,
	775: 2.551020,
	780: 2.295918,
	785: 2.040816,
	790: 1.785714,
	795: 1.785714,
	800: 1.530612,
	805: 1.530612,
	810: 1.530612,
	815: 1.530612,
	820: 1.275510,
	825: 1.275510,
	830: 1.275510,
	835: 1.275510,
	840: 1.275510,
	845: 1.275510,
	850: 1.275510,
	855: 1.275510,
	860: 1.020408,
	865: 1.020408,
	870: 1.020408,
	875: 1.020408,
	880: 1.020408,
	885: 1.020408,
	890: 1.020408,
	895: 1.020408,
	900: 0.765306,
	905: 0.765306,
	910: 0.765306,
	915: 0.765306,
	920: 0.765306,
	925: 0.765306,
	930: 0.765306,
	935: 0.765306,
	940: 0.510204,
	945: 0.510204,
	950: 0.510204,
	955: 0.510204,
	960: 0.510204,
	965: 0.510204,
	970: 0.510204,
	975: 0.510204,
	980: 0.255102,
	985: 0.255102,
	990: 0.255102,
	995: 0.255102,
	1000: 0.255102,
	1005: 0.255102,
	1010: 0.255102,
	1015: 0.255102,
	1020: 0.127551,
	1025: 0.127551,
	1030: 0.127551,
	1035: 0.127551,
	1040: 0.127551,
	1045: 0.127551,
	1050: 0.127551,
	1055: 0.127551,
	1060: 0.000000,
	1100: 0.000000,
	1200: 0.000000,
};

var SPD_Nichia_NSPL500DS = {
	200: 0.000000,
	300: 0.000000,
	305: 0.000000,
	310: 0.000000,
	315: 0.000000,
	320: 0.000000,
	325: 0.000000,
	330: 0.000000,
	335: 0.000000,
	340: 0.000000,
	345: 0.000000,
	350: 0.000000,
	355: 0.000000,
	360: 0.000000,
	365: 0.000000,
	370: 0.000000,
	375: 0.000000,
	380: 0.100000,
	385: 0.100000,
	390: 0.300000,
	395: 0.200000,
	400: 0.300000,
	405: 0.300000,
	410: 0.300000,
	415: 0.400000,
	420: 0.500000,
	425: 0.800000,
	430: 1.600000,
	435: 2.600000,
	440: 5.200000,
	445: 10.000000,
	450: 20.500000,
	455: 42.300000,
	460: 73.300000,
	465: 88.300000,
	470: 78.100000,
	475: 66.400000,
	480: 58.700000,
	485: 48.700000,
	490: 41.300000,
	495: 38.000000,
	500: 37.600000,
	505: 38.100000,
	510: 40.300000,
	515: 44.200000,
	520: 47.600000,
	525: 51.400000,
	530: 55.800000,
	535: 59.000000,
	540: 64.200000,
	545: 69.000000,
	550: 73.700000,
	555: 78.200000,
	560: 83.800000,
	565: 88.100000,
	570: 92.100000,
	575: 94.900000,
	580: 98.000000,
	585: 99.500000,
	590: 99.700000,
	595: 99.800000,
	600: 97.900000,
	605: 95.100000,
	610: 91.000000,
	615: 87.600000,
	620: 82.500000,
	625: 78.300000,
	630: 72.800000,
	635: 67.800000,
	640: 63.100000,
	645: 58.000000,
	650: 53.100000,
	655: 48.600000,
	660: 44.500000,
	665: 39.900000,
	670: 36.500000,
	675: 33.100000,
	680: 29.800000,
	685: 26.700000,
	690: 24.400000,
	695: 21.600000,
	700: 19.500000,
	705: 17.900000,
	710: 15.600000,
	715: 13.800000,
	720: 12.500000,
	725: 10.900000,
	730: 9.900000,
	735: 9.000000,
	740: 7.700000,
	745: 7.000000,
	750: 6.200000,
	755: 5.600000,
	760: 5.000000,
	765: 4.300000,
	770: 3.900000,
	775: 3.500000,
	780: 3.000000,
	785: 2.800000,
	790: 2.400000,
	795: 2.200000,
	800: 2.100000,
	805: 1.911400,
	810: 1.782900,
	815: 1.654300,
	820: 1.525700,
	825: 1.397100,
	830: 1.268600
};

var SPD_Nichia_NSPU510CS = {
	200: 0.000000,
	300: 0.000000,
	305: 0.000000,
	310: 0.000000,
	315: 0.000000,
	320: 0.000000,
	325: 0.000000,
	330: 0.000000,
	335: 0.000000,
	340: 0.568000,
	345: 0.567400,
	350: 0.710000,
	355: 0.993700,
	360: 1.756300,
	365: 5.607800,
	370: 33.333100,
	375: 97.455200,
	380: 52.756800,
	385: 22.309600,
	390: 8.615400,
	395: 4.189400,
	400: 1.949300,
	405: 1.138600,
	410: 0.710000,
	415: 0.638900,
	420: 0.568000,
	425: 0.496900,
	430: 0.425900,
	435: 0.000000,
	440: 0.000000,
	445: 0.000000,
	450: 0.000000,
	455: 0.000000,
	460: 0.000000,
	465: 0.000000,
	470: 0.000000,
	475: 0.000000,
	480: 0.000000,
	485: 0.000000,
	490: 0.000000,
	495: 0.000000,
	500: 0.000000,
	505: 0.000000,
	510: 0.000000,
	515: 0.000000,
	520: 0.000000,
	525: 0.000000,
	530: 0.000000,
	535: 0.000000,
	540: 0.000000,
	545: 0.000000,
	550: 0.000000,
	555: 0.000000,
	560: 0.000000,
	565: 0.000000,
	570: 0.000000,
	575: 0.000000,
	580: 0.000000,
	585: 0.000000,
	590: 0.000000,
	595: 0.000000,
	600: 0.000000,
	605: 0.000000,
	610: 0.000000,
	615: 0.000000,
	620: 0.000000,
	625: 0.000000,
	630: 0.000000,
	635: 0.000000,
	640: 0.000000,
	645: 0.000000,
	650: 0.000000,
	655: 0.000000,
	660: 0.000000,
	665: 0.000000,
	670: 0.000000,
	675: 0.000000,
	680: 0.000000,
	685: 0.000000,
	690: 0.000000,
	695: 0.000000,
	700: 0.000000,
	705: 0.000000,
	710: 0.000000,
	715: 0.000000,
	720: 0.000000,
	725: 0.000000,
	730: 0.000000,
	735: 0.000000,
	740: 0.000000,
	745: 0.000000,
	750: 0.000000,
	755: 0.000000,
	760: 0.000000,
	765: 0.000000,
	770: 0.000000,
	775: 0.000000,
	780: 0.000000,
	785: 0.000000,
	790: 0.000000,
	795: 0.000000,
	800: 0.000000,
	805: 0.000000,
	810: 0.000000,
	815: 0.000000,
	820: 0.000000,
	825: 0.000000,
	830: 0.000000,
	1200: 0.000000
};

var SPD_Luckylight_504WC2E_W6_3PC = {
	200: 0.000000,
	300: 0.000000,
	305: 0.000000,
	310: 0.000000,
	315: 0.000000,
	320: 0.000000,
	325: 0.000000,
	330: 0.000000,
	335: 0.000000,
	340: 0.000000,
	345: 0.000000,
	350: 0.000000,
	355: 0.000000,
	360: 0.000000,
	365: 0.000000,
	370: 0.000000,
	375: 0.000000,
	380: 0.000000,
	385: 0.000000,
	390: 0.259800,
	395: 0.519700,
	400: 1.039300,
	405: 2.078700,
	410: 4.157300,
	415: 10.047700,
	420: 16.346100,
	425: 23.270600,
	430: 30.624200,
	435: 38.926000,
	440: 49.265100,
	445: 61.547700,
	450: 70.565700,
	455: 77.465000,
	460: 81.805600,
	465: 79.905300,
	470: 69.238100,
	475: 58.384400,
	480: 46.053500,
	485: 33.902500,
	490: 24.912600,
	495: 19.461000,
	500: 18.011300,
	505: 23.075700,
	510: 32.812800,
	515: 41.004100,
	520: 47.526700,
	525: 52.736600,
	530: 57.696600,
	535: 62.093400,
	540: 66.627400,
	545: 70.743300,
	550: 74.825900,
	555: 78.829500,
	560: 82.839900,
	565: 86.513200,
	570: 89.772800,
	575: 92.641000,
	580: 95.199600,
	585: 97.188000,
	590: 98.726400,
	595: 99.708100,
	600: 99.979200,
	605: 99.855400,
	610: 98.998100,
	615: 97.727600,
	620: 96.121800,
	625: 94.172200,
	630: 91.764900,
	635: 89.266400,
	640: 86.456000,
	645: 83.493000,
	650: 80.268900,
	655: 77.047900,
	660: 74.025400,
	665: 70.760200,
	670: 67.687200,
	675: 64.556700,
	680: 61.534600,
	685: 58.530500,
	690: 55.652900,
	695: 52.776700,
	700: 49.826900,
	705: 47.162500,
	710: 44.358200,
	715: 41.549300,
	720: 38.740800,
	725: 36.066000,
	730: 33.331800,
	735: 30.711600,
	740: 28.035100,
	745: 25.390300,
	750: 22.743200,
	755: 20.067500,
	760: 17.518600,
	765: 14.906600,
	770: 12.304300,
	775: 9.630600,
	780: 7.019300,
	785: 4.365200,
	790: 1.734900,
	795: 1.400000,
	800: 1.000000,
	805: 0.600000,
	810: 0.500000,
	815: 0.400000,
	820: 0.300000,
	825: 0.200000,
	830: 0.200000,
	835: 0.150000,
	840: 0.150000,
	845: 0.150000,
	850: 0.150000,
	855: 0.100000,
	860: 0.100000,
	865: 0.100000,
	870: 0.100000,
	875: 0.100000,
	880: 0.100000,
	885: 0.100000,
	890: 0.100000,
	895: 0.050000,
	900: 0.050000,
	905: 0.050000,
	910: 0.050000,
	915: 0.050000,
	920: 0.050000,
	925: 0.050000,
	930: 0.050000,
	935: 0.050000,
	940: 0.050000,
	945: 0.050000,
	950: 0.050000,
	955: 0.050000,
	960: 0.050000,
	965: 0.050000,
	970: 0.050000,
	975: 0.000000,
	980: 0.000000,
	985: 0.000000,
	990: 0.000000,
	995: 0.000000,
	1000: 0.000000,
	1200: 0.000000
};

// colour.sd_blackbody(3200, colour.SpectralShape(200, 1200, 5))
//
var SPD_TungstenHalogen_3200K = {
	200: 0.009102,
	205: 0.013920,
	210: 0.020802,
	215: 0.030427,
	220: 0.043626,
	225: 0.061403,
	230: 0.084944,
	235: 0.115630,
	240: 0.155048,
	245: 0.204992,
	250: 0.267467,
	255: 0.344685,
	260: 0.439055,
	265: 0.553173,
	270: 0.689808,
	275: 0.851880,
	280: 1.042438,
	285: 1.264636,
	290: 1.521705,
	295: 1.816922,
	300: 2.153585,
	305: 2.534976,
	310: 2.964335,
	315: 3.444828,
	320: 3.979518,
	325: 4.571337,
	330: 5.223063,
	335: 5.937292,
	340: 6.716419,
	345: 7.562618,
	350: 8.477828,
	355: 9.463737,
	360: 10.521769,
	365: 11.653081,
	370: 12.858554,
	375: 14.138790,
	380: 15.494114,
	385: 16.924570,
	390: 18.429931,
	395: 20.009701,
	400: 21.663123,
	405: 23.389190,
	410: 25.186650,
	415: 27.054025,
	420: 28.989618,
	425: 30.991528,
	430: 33.057663,
	435: 35.185759,
	440: 37.373387,
	445: 39.617976,
	450: 41.916823,
	455: 44.267108,
	460: 46.665912,
	465: 49.110230,
	470: 51.596985,
	475: 54.123042,
	480: 56.685220,
	485: 59.280308,
	490: 61.905076,
	495: 64.556283,
	500: 67.230694,
	505: 69.925086,
	510: 72.636261,
	515: 75.361052,
	520: 78.096333,
	525: 80.839025,
	530: 83.586107,
	535: 86.334618,
	540: 89.081665,
	545: 91.824428,
	550: 94.560165,
	555: 97.286214,
	560: 100.000000,
	565: 102.699034,
	570: 105.380918,
	575: 108.043346,
	580: 110.684107,
	585: 113.301084,
	590: 115.892256,
	595: 118.455699,
	600: 120.989586,
	605: 123.492182,
	610: 125.961854,
	615: 128.397058,
	620: 130.796348,
	625: 133.158368,
	630: 135.481853,
	635: 137.765631,
	640: 140.008614,
	645: 142.209802,
	650: 144.368277,
	655: 146.483207,
	660: 148.553834,
	665: 150.579481,
	670: 152.559547,
	675: 154.493499,
	680: 156.380879,
	685: 158.221295,
	690: 160.014418,
	695: 161.759986,
	700: 163.457796,
	705: 165.107701,
	710: 166.709610,
	715: 168.263488,
	720: 169.769348,
	725: 171.227250,
	730: 172.637303,
	735: 173.999659,
	740: 175.314509,
	745: 176.582087,
	750: 177.802662,
	755: 178.976536,
	760: 180.104050,
	765: 181.185568,
	770: 182.221489,
	775: 183.212236,
	780: 184.158261,
	785: 185.060035,
	790: 185.918054,
	795: 186.732832,
	800: 187.504903,
	805: 188.234819,
	810: 188.923146,
	815: 189.570466,
	820: 190.177371,
	825: 190.744468,
	830: 191.272373,
	835: 191.761708,
	840: 192.213111,
	845: 192.627218,
	850: 193.004675,
	855: 193.346135,
	860: 193.652253,
	865: 193.923683,
	870: 194.161090,
	875: 194.365133,
	880: 194.536474,
	885: 194.675777,
	890: 194.783703,
	895: 194.860912,
	900: 194.908061,
	905: 194.925808,
	910: 194.914805,
	915: 194.875701,
	920: 194.809141,
	925: 194.715766,
	930: 194.596212,
	935: 194.451110,
	940: 194.281084,
	945: 194.086754,
	950: 193.868733,
	955: 193.627626,
	960: 193.364035,
	965: 193.078550,
	970: 192.771759,
	975: 192.444238,
	980: 192.096560,
	985: 191.729284,
	990: 191.342969,
	995: 190.938160,
	1000: 190.515397,
	1005: 190.075210,
	1010: 189.618121,
	1015: 189.144645,
	1020: 188.655288,
	1025: 188.150547,
	1030: 187.630912,
	1035: 187.096863,
	1040: 186.548872,
	1045: 185.987403,
	1050: 185.412910,
	1055: 184.825842,
	1060: 184.226637,
	1065: 183.615724,
	1070: 182.993525,
	1075: 182.360454,
	1080: 181.716915,
	1085: 181.063307,
	1090: 180.400020,
	1095: 179.727431,
	1100: 179.045915,
	1105: 178.355837,
	1110: 177.657555,
	1115: 176.951417,
	1120: 176.237767,
	1125: 175.516938,
	1130: 174.789255,
	1135: 174.055041,
	1140: 173.314605,
	1145: 172.568256,
	1150: 171.816288,
	1155: 171.058993,
	1160: 170.296655,
	1165: 169.529552,
	1170: 168.757954,
	1175: 167.982125,
	1180: 167.202323,
	1185: 166.418799,
	1190: 165.631797,
	1195: 164.841556,
	1200: 164.048308
};

function Determinant3x3(m)
{
	var det = m.m00 * (m.m22 * m.m11 - m.m21 * m.m12) -
			  m.m10 * (m.m22 * m.m01 - m.m21 * m.m02) +
			  m.m20 * (m.m12 * m.m01 - m.m11 * m.m02);

	return (det);
}

function MtxInvert3x3(m, i)
{
	var scale = 1.0 / Determinant3x3(m);

	i.m00 =  scale * (m.m22 * m.m11 - m.m21 * m.m12);
	i.m01 = -scale * (m.m22 * m.m01 - m.m21 * m.m02);
	i.m02 =  scale * (m.m12 * m.m01 - m.m11 * m.m02);

	i.m10 = -scale * (m.m22 * m.m10 - m.m20 * m.m12);
	i.m11 =  scale * (m.m22 * m.m00 - m.m20 * m.m02);
	i.m12 = -scale * (m.m12 * m.m00 - m.m10 * m.m02);

	i.m20 =  scale * (m.m21 * m.m10 - m.m20 * m.m11);
	i.m21 = -scale * (m.m21 * m.m00 - m.m20 * m.m01);
	i.m22 =  scale * (m.m11 * m.m00 - m.m10 * m.m01);
}

function MtxTranspose3x3(m)
{
	var v = m.m01;
	m.m01 = m.m10;
	m.m10 = v;

	v = m.m02;
	m.m02 = m.m20;
	m.m20 = v;

	v = m.m12;
	m.m12 = m.m21;
	m.m21 = v;
}

function GetBeamAngle(SelectedBeamAngle)
{
	var BeamAngle;
	switch (SelectedBeamAngle)
	{
		case 0:
			BeamAngle = 180;
			break;
		case 1:
			BeamAngle = 90;
			break;
		case 2:
			BeamAngle = 90;
			break;
	}
	return(BeamAngle);
}

function GetCuvetteThickness(SelectedCuvetteThickness)
{
	var Thickness;
	switch (SelectedCuvetteThickness)
	{
		case 0:
			Thickness = 1.0;
			break;
		case 1:
			Thickness = 1.1;
			break;
		case 2:
			Thickness = 1.4;
			break;
		case 3:
			Thickness = 1.5;
			break;
		case 4:
			Thickness = 1.6;
			break;
		case 5:
			Thickness = 2.0;
			break;
		case 6:
			Thickness = 4.0;
			break;
		case 7:
			Thickness = 5.0;
			break;
	}
	return(Thickness);
}

function GetRefWhite(SelectedRefWhite, White)
{
	window[White].Y = 1.0;
	switch (SelectedRefWhite)
	{
		case 0:
			window[White].Name = "A/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Incandescent (Tungsten)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_A";
			window[White].CCT = "2856";
			window[White].X = 1.09850;
			window[White].Z = 0.35585;
			window[White].x = 0.44757;
			window[White].y = 0.40744;
			break;
		case 1:
			window[White].Name = "B/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Direct sunlight at noon (obsolete)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4874";
			window[White].X = 0.99093;
			window[White].Z = 0.85313;
			window[White].x = 0.34842;
			window[White].y = 0.35161;
			break;
		case 2:
			window[White].Name = "C/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "North sky daylight (average) (obsolete)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_C";
			window[White].CCT = "6774";
			window[White].X = 0.98074;
			window[White].Z = 1.18232;
			window[White].x = 0.31006;
			window[White].y = 0.31616;
			break;
		case 3:
			window[White].Name = "D50/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Horizon light / ICC profile PCS";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D50";
			window[White].CCT = "5003";
			window[White].X = 0.96422;
			window[White].Z = 0.82521;
			window[White].x = 0.34567;
			window[White].y = 0.35850;
			break;
		case 4:
			window[White].Name = "D55/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Mid-morning / Mid-afternoon daylight";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D55";
			window[White].CCT = "5503";
			window[White].X = 0.95682;
			window[White].Z = 0.92149;
			window[White].x = 0.33242;
			window[White].y = 0.34743;
			break;
		case 5:
			window[White].Name = "D65/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Noon daylight / Television, sRGB color space";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D65";
			window[White].CCT = "6504";
			window[White].X = 0.95047;
			window[White].Z = 1.08883;
			window[White].x = 0.31273;
			window[White].y = 0.32902;
			break;
		case 6:
			window[White].Name = "D75/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "North sky daylight";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D75";
			window[White].CCT = "7504";
			window[White].X = 0.94972;
			window[White].Z = 1.22638;
			window[White].x = 0.29902;
			window[White].y = 0.31485;
			break;
		case 7:
			window[White].Name = "E/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Equal energy";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "5454";
			window[White].X = 1.00000;
			window[White].Z = 1.00000;
			window[White].x = 0.33333;
			window[White].y = 0.33333;
			break;
		case 8:
			window[White].Name = "F1/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Daylight (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6430";
			window[White].X = 0.92834;
			window[White].Z = 1.03665;
			window[White].x = 0.31310;
			window[White].y = 0.33727;
			break;
		case 9:
			window[White].Name = "F2/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Cool white (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4230";
			window[White].X = 0.99186;
			window[White].Z = 0.67393;
			window[White].x = 0.37207;
			window[White].y = 0.37512;
			break;
		case 10:
			window[White].Name = "F3/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "White (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3450";
			window[White].X = 1.03754;
			window[White].Z = 0.49861;
			window[White].x = 0.40910;
			window[White].y = 0.39430;
			break;
		case 11:
			window[White].Name = "F4/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Warm white (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2940";
			window[White].X = 1.09147;
			window[White].Z = 0.38813;
			window[White].x = 0.44018;
			window[White].y = 0.40329;
			break;
		case 12:
			window[White].Name = "F5/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Daylight (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6350";
			window[White].X = 0.90872;
			window[White].Z = 0.98723;
			window[White].x = 0.31379;
			window[White].y = 0.34531;
			break;
		case 13:
			window[White].Name = "F6/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Light white (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4150";
			window[White].X = 0.97309;
			window[White].Z = 0.60191;
			window[White].x = 0.37790;
			window[White].y = 0.38835;
			break;
		case 14:
			window[White].Name = "F7/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Daylight / D65 (Simulator)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6500";
			window[White].X = 0.95041;
			window[White].Z = 1.08747;
			window[White].x = 0.31285;
			window[White].y = 0.32918;
			break;
		case 15:
			window[White].Name = "F8/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "D50 (Simulator) / Sylvania F40 Design 50";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "5000";
			window[White].X = 0.96413;
			window[White].Z = 0.82333;
			window[White].x = 0.34588;
			window[White].y = 0.35875;
			break;
		case 16:
			window[White].Name = "F9/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Cool white deluxe (fluorescent)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4150";
			window[White].X = 1.00365;
			window[White].Z = 0.67868;
			window[White].x = 0.37417;
			window[White].y = 0.37281;
			break;
		case 17:
			window[White].Name = "F10/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Philips TL85 / Ultralume 50";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "5000";
			window[White].X = 0.96174;
			window[White].Z = 0.81712;
			window[White].x = 0.34609;
			window[White].y = 0.35986;
			break;
		case 18:
			window[White].Name = "F11/2°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Philips TL84 / Ultralume 40";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4000";
			window[White].X = 1.00962;
			window[White].Z = 0.64350;
			window[White].x = 0.38054;
			window[White].y = 0.37692;
			break;
		case 19:
			window[White].Name = "F12/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Philips TL83 / Ultralume 30";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3000";
			window[White].X = 1.08046;
			window[White].Z = 0.39228;
			window[White].x = 0.43695;
			window[White].y = 0.40441;
			break;
		case 20:
			window[White].Name = "LED-B1/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted blue";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2733";
			window[White].X = 1.118195;
			window[White].Z = 0.333987;
			window[White].x = 0.4560;
			window[White].y = 0.4078;
			break;
		case 21:
			window[White].Name = "LED-B2/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted blue";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2998";
			window[White].X = 1.085992;
			window[White].Z = 0.406530;
			window[White].x = 0.4357;
			window[White].y = 0.4012;
			break;
		case 22:
			window[White].Name = "LED-B3/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted blue";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4103";
			window[White].X = 1.008864;
			window[White].Z = 0.677142;
			window[White].x = 0.3756;
			window[White].y = 0.3723;
			break;
		case 23:
			window[White].Name = "LED-B4/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted blue";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "5109";
			window[White].X = 0.977156;
			window[White].Z = 0.878355;
			window[White].x = 0.3422;
			window[White].y = 0.3502;
			break;
		case 24:
			window[White].Name = "LED-B5/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted blue";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6598";
			window[White].X = 0.963535;
			window[White].Z = 1.126700;
			window[White].x = 0.3118;
			window[White].y = 0.3236;
			break;
		case 25:
			window[White].Name = "LED-BH1/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Mixing of phosphor-converted blue LED and red LED (blue-hybrid)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2851";
			window[White].X = 1.100344;
			window[White].Z = 0.359075;
			window[White].x = 0.4474;
			window[White].y = 0.4066;
			break;
		case 26:
			window[White].Name = "LED-RGB1/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Mixing of red, green, and blue LEDs";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2840";
			window[White].X = 1.082166;
			window[White].Z = 0.292567;
			window[White].x = 0.4557;
			window[White].y = 0.4211;
			break;
		case 27:
			window[White].Name = "LED-V1/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted violet";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3079";
			window[White].X = 1.002639;
			window[White].Z = 0.196130;
			window[White].x = 0.4560;
			window[White].y = 0.4548;
			break;
		case 28:
			window[White].Name = "LED-V2/2°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Phosphor-converted violet";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4070";
			window[White].X = 1.001589;
			window[White].Z = 0.647417;
			window[White].x = 0.3781;
			window[White].y = 0.3775;
			break;

		case 30:
			window[White].Name = "A/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Incandescent (Tungsten)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_A";
			window[White].CCT = "2789";
			window[White].X = 1.11144;
			window[White].Z = 0.35200;
			window[White].x = 0.45117;
			window[White].y = 0.40594;
			break;
		case 31:
			window[White].Name = "B/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Direct sunlight at noon (obsolete)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4826";
			window[White].X = 0.991778;
			window[White].Z = 0.843493;
			window[White].x = 0.34980;
			window[White].y = 0.35270;
			break;
		case 32:
			window[White].Name = "C/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "North sky daylight (average) (obsolete)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_C";
			window[White].CCT = "6724";
			window[White].X = 0.97285;
			window[White].Z = 1.16145;
			window[White].x = 0.31039;
			window[White].y = 0.31905;
			break;
		case 33:
			window[White].Name = "D50/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Horizon light / ICC profile PCS";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D50";
			window[White].CCT = "4929";
			window[White].X = 0.96720;
			window[White].Z = 0.81427;
			window[White].x = 0.34773;
			window[White].y = 0.35952;
			break;
		case 34:
			window[White].Name = "D55/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Mid-morning / Mid-afternoon daylight";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D55";
			window[White].CCT = "5431";
			window[White].X = 0.95799;
			window[White].Z = 0.90926;
			window[White].x = 0.33411;
			window[White].y = 0.34877;
			break;
		case 35:
			window[White].Name = "D65/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Noon daylight / Television, sRGB color space";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D65";
			window[White].CCT = "6429";
			window[White].X = 0.94811;
			window[White].Z = 1.07304;
			window[White].x = 0.31382;
			window[White].y = 0.33100;
			break;
		case 36:
			window[White].Name = "D75/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "North sky daylight";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_CIE_Illuminant_D75";
			window[White].CCT = "7418";
			window[White].X = 0.94416;
			window[White].Z = 1.20641;
			window[White].x = 0.29968;
			window[White].y = 0.31740;
			break;
		case 37:
			window[White].Name = "E/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Equal energy";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "5454";
			window[White].X = 1.00000;
			window[White].Z = 1.00000;
			window[White].x = 0.33333;
			window[White].y = 0.33333;
			break;
		case 38:
			window[White].Name = "F1/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Daylight (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6182";
			window[White].X = 0.94791;
			window[White].Z = 1.03191;
			window[White].x = 0.31811;
			window[White].y = 0.33559;
			break;
		case 39:
			window[White].Name = "F2/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Cool white (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3959";
			window[White].X = 1.03279;
			window[White].Z = 0.69027;
			window[White].x = 0.37928;
			window[White].y = 0.36723;
			break;
		case 40:
			window[White].Name = "F3/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "White (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3177";
			window[White].X = 1.08968;
			window[White].Z = 0.51965;
			window[White].x = 0.41761;
			window[White].y = 0.38324;
			break;
		case 41:
			window[White].Name = "F4/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Warm white (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2694";
			window[White].X = 1.14961;
			window[White].Z = 0.40963;
			window[White].x = 0.44920;
			window[White].y = 0.39074;
			break;
		case 42:
			window[White].Name = "F5/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Daylight (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6074";
			window[White].X = 0.93369;
			window[White].Z = 0.98636;
			window[White].x = 0.31975;
			window[White].y = 0.34246;
			break;
		case 43:
			window[White].Name = "F6/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Light white (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3848";
			window[White].X = 1.02148;
			window[White].Z = 0.62074;
			window[White].x = 0.38660;
			window[White].y = 0.37847;
			break;
		case 44:
			window[White].Name = "F7/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Daylight / D65 (Simulator)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "6342";
			window[White].X = 0.95792;
			window[White].Z = 1.07686;
			window[White].x = 0.31565;
			window[White].y = 0.32951;
			break;
		case 45:
			window[White].Name = "F8/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "D50 (Simulator) / Sylvania F40 Design 50";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4883";
			window[White].X = 0.97115;
			window[White].Z = 0.81135;
			window[White].x = 0.34902;
			window[White].y = 0.35939;
			break;
		case 46:
			window[White].Name = "F9/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Cool white deluxe (fluorescent)";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4013";
			window[White].X = 1.02116;
			window[White].Z = 0.67826;
			window[White].x = 0.37829;
			window[White].y = 0.37045;
			break;
		case 47:
			window[White].Name = "F10/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Philips TL85 / Ultralume 50";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "4794";
			window[White].X = 0.99001;
			window[White].Z = 0.83134;
			window[White].x = 0.35090;
			window[White].y = 0.35444;
			break;
		case 48:
			window[White].Name = "F11/10°";
			window[White].Standard = "ASTM E308-18";
			window[White].Note = "Philips TL84 / Ultralume 40";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "3820";
			window[White].X = 1.03863;
			window[White].Z = 0.65607;
			window[White].x = 0.38543;
			window[White].y = 0.37110;
			break;
		case 49:
			window[White].Name = "F12/10°";
			window[White].Standard = "https://en.wikipedia.org/wiki/Standard_illuminant";
			window[White].Note = "Philips TL83 / Ultralume 30";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "";
			window[White].CCT = "2851";
			window[White].X = 1.11428;
			window[White].Z = 0.40353;
			window[White].x = 0.44256;
			window[White].y = 0.39717;
			break;
		case 50:
			window[White].Name = "Nichia NSPW500DS/10°";
			window[White].Standard = "http://www.nichia.co.jp/en/product/led_product_data.html?type=%27NSPW500DS%27";
			window[White].Note = "Nichia NSPW500DS";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_Nichia_NSPW500DS";
			window[White].CCT = "6468";
			window[White].X = 0.99116;
			window[White].Z = 1.15651;
			window[White].x = 0.31489;
			window[White].y = 0.31770;
			break;
		case 51:
			window[White].Name = "Nichia NSPL500DS/10°";
			window[White].Standard = "http://www.nichia.co.jp/en/product/led_product_data.html?type=%27NSPL500DS%27";
			window[White].Note = "Nichia NSPL500DS";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_Nichia_NSPL500DS";
			window[White].CCT = "3368";
			window[White].X = 1.029273;
			window[White].Z = 0.436325;
			window[White].x = 0.417454;
			window[White].y = 0.405581;
			break;
		case 52:
			window[White].Name = "Nichia NSPU510CS/10°";
			window[White].Standard = "http://www.nichia.co.jp/en/product/uvled.html";
			window[White].Note = "NSPU510CS";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_Nichia_NSPU510CS";
			window[White].CCT = "xxx";
			window[White].X = 0.00000;
			window[White].Z = 0.00000;
			window[White].x = 0.00000;
			window[White].y = 0.00000;
			break;
		case 53:
			window[White].Name = "Luckylight 504WC2E-W6-3PC/10°";
			window[White].Standard = "https://www.luckylight.cn/en/products/through-hole-led/white-led/504wc2e-w6-3pc/";
			window[White].Note = "Luckylight 504WC2E-W6-3PC";
			window[White].StdObs = "CIE1964StandardObserver";
			window[White].SPD = "SPD_Luckylight_504WC2E_W6_3PC";
			window[White].CCT = "3259";
			window[White].X = 1.13715;
			window[White].Z = 0.70331;
			window[White].x = 0.40034;
			window[White].y = 0.35206;
			break;
		case 54:
			window[White].Name = "Tungsten Halogen - 3200K/10°";
			window[White].Standard = "";
			window[White].Note = "Tungsten Halogen - 3200K)";
			window[White].StdObs = "CIE1931StandardObserver";
			window[White].SPD = "SPD_TungstenHalogen_3200K";
			window[White].CCT = "3200";
			window[White].X = 1.06118;
			window[White].Z = 0.44538;
			window[White].x = 0.42336;
			window[White].y = 0.39895;
			break;
	}
	return(window[White]);
}

function GetRGBModel(SelectedRGBModel)
{
	RGBModel.Yw = 1.00000;

	switch (SelectedRGBModel)
	{
		case 0:
			RGBModel.xr = 0.64;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.21;
			RGBModel.yg = 0.71;
			RGBModel.xb = 0.15;
			RGBModel.yb = 0.06;

			RGBModel.Name = "Adobe RGB (1998)";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 1:
			RGBModel.xr = 0.625;
			RGBModel.yr = 0.340;
			RGBModel.xg = 0.280;
			RGBModel.yg = 0.595;
			RGBModel.xb = 0.155;
			RGBModel.yb = 0.070;

			RGBModel.Name = "AppleRGB";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma =  1.8;
			RGBModel.GammaIndex = 1;
			break;
		case 2:
			RGBModel.xr = 0.7347;
			RGBModel.yr = 0.2653;
			RGBModel.xg = 0.2150;
			RGBModel.yg = 0.7750;
			RGBModel.xb = 0.1300;
			RGBModel.yb = 0.0350;

			RGBModel.Name = "Best RGB";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 3:
			RGBModel.xr = 0.6888;
			RGBModel.yr = 0.3112;
			RGBModel.xg = 0.1986;
			RGBModel.yg = 0.7551;
			RGBModel.xb = 0.1265;
			RGBModel.yb = 0.0352;

			RGBModel.Name = "Beta RGB";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 4:
			RGBModel.xr = 0.64;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.28;
			RGBModel.yg = 0.65;
			RGBModel.xb = 0.15;
			RGBModel.yb = 0.06;

			RGBModel.Name = "Bruce RGB";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 5:
			RGBModel.xr = 0.735;
			RGBModel.yr = 0.265;
			RGBModel.xg = 0.274;
			RGBModel.yg = 0.717;
			RGBModel.xb = 0.167;
			RGBModel.yb = 0.009;

			RGBModel.Name = "CIE RGB";
			RGBModel.Reference = "E/2°";
			RGBModel.Xw = 1.00000;
			RGBModel.Zw = 1.00000;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 6:
			RGBModel.xr = 0.630;
			RGBModel.yr = 0.340;
			RGBModel.xg = 0.295;
			RGBModel.yg = 0.605;
			RGBModel.xb = 0.150;
			RGBModel.yb = 0.075;

			RGBModel.Name = "ColorMatch RGB";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  1.8;
			RGBModel.GammaIndex = 1;
			break;
		case 7:
			RGBModel.xr = 0.696;
			RGBModel.yr = 0.300;
			RGBModel.xg = 0.215;
			RGBModel.yg = 0.765;
			RGBModel.xb = 0.130;
			RGBModel.yb = 0.035;

			RGBModel.Name = "Don RGB 4";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 8:
			RGBModel.xr = 0.67;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.21;
			RGBModel.yg = 0.71;
			RGBModel.xb = 0.14;
			RGBModel.yb = 0.08;

			RGBModel.Name = "ECI RGB v2";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  0.0;
			RGBModel.GammaIndex = 4;
			break;
		case 9:
			RGBModel.xr = 0.695;
			RGBModel.yr = 0.305;
			RGBModel.xg = 0.260;
			RGBModel.yg = 0.700;
			RGBModel.xb = 0.110;
			RGBModel.yb = 0.005;

			RGBModel.Name = "Ekta Space PS5";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 10:
			RGBModel.xr = 0.67;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.21;
			RGBModel.yg = 0.71;
			RGBModel.xb = 0.14;
			RGBModel.yb = 0.08;

			RGBModel.Name = "NTSC RGB";
			RGBModel.Reference = "C/2°";
			RGBModel.Xw = 0.98074;
			RGBModel.Zw = 1.18232;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 11:
			RGBModel.xr = 0.64;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.29;
			RGBModel.yg = 0.60;
			RGBModel.xb = 0.15;
			RGBModel.yb = 0.06;

			RGBModel.Name = "PAL/SECAM RGB";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 12:
			RGBModel.xr = 0.7347;
			RGBModel.yr = 0.2653;
			RGBModel.xg = 0.1596;
			RGBModel.yg = 0.8404;
			RGBModel.xb = 0.0366;
			RGBModel.yb = 0.0001;

			RGBModel.Name = "ProPhoto RGB";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  1.8;
			RGBModel.GammaIndex = 1;
			break;
		case 13:
			RGBModel.xr = 0.630;
			RGBModel.yr = 0.340;
			RGBModel.xg = 0.310;
			RGBModel.yg = 0.595;
			RGBModel.xb = 0.155;
			RGBModel.yb = 0.070;

			RGBModel.Name = "SMPTE-C RGB";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
		case 14:
			RGBModel.xr = 0.64;
			RGBModel.yr = 0.33;
			RGBModel.xg = 0.30;
			RGBModel.yg = 0.60;
			RGBModel.xb = 0.15;
			RGBModel.yb = 0.06;

			RGBModel.Name = "sRGB";
			RGBModel.Reference = "D65/2°";
			RGBModel.Xw = 0.95047;
			RGBModel.Zw = 1.08883;
			RGBModel.Gamma = -2.2;
			RGBModel.GammaIndex = 3;
			break;
		case 15:
			RGBModel.xr = 0.735;
			RGBModel.yr = 0.265;
			RGBModel.xg = 0.115;
			RGBModel.yg = 0.826;
			RGBModel.xb = 0.157;
			RGBModel.yb = 0.018;

			RGBModel.Name = "Wide Gamut RGB";
			RGBModel.Reference = "D50/2°";
			RGBModel.Xw = 0.96422;
			RGBModel.Zw = 0.82521;
			RGBModel.Gamma =  2.2;
			RGBModel.GammaIndex = 2;
			break;
	}

	var m = {m00:RGBModel.xr/RGBModel.yr, m01:RGBModel.xg/RGBModel.yg, m02:RGBModel.xb/RGBModel.yb, m10:1.0, m11:1.0, m12:1.0, m20:(1.0-RGBModel.xr-RGBModel.yr)/RGBModel.yr, m21:(1.0-RGBModel.xg-RGBModel.yg)/RGBModel.yg, m22:(1.0-RGBModel.xb-RGBModel.yb)/RGBModel.yb};
	var mi = {m00:1.0, m01:0.0, m02:0.0, m10:0.0, m11:1.0, m12:0.0, m20:0.0, m21:0.0, m22:1.0};
	MtxInvert3x3(m, mi);

	var sr = RGBModel.Xw * mi.m00 + RGBModel.Yw * mi.m01 + RGBModel.Zw * mi.m02;
	var sg = RGBModel.Xw * mi.m10 + RGBModel.Yw * mi.m11 + RGBModel.Zw * mi.m12;
	var sb = RGBModel.Xw * mi.m20 + RGBModel.Yw * mi.m21 + RGBModel.Zw * mi.m22;

	MtxRGB2XYZ.m00 = sr * m.m00;
	MtxRGB2XYZ.m01 = sg * m.m01;
	MtxRGB2XYZ.m02 = sb * m.m02;
	MtxRGB2XYZ.m10 = sr * m.m10;
	MtxRGB2XYZ.m11 = sg * m.m11;
	MtxRGB2XYZ.m12 = sb * m.m12;
	MtxRGB2XYZ.m20 = sr * m.m20;
	MtxRGB2XYZ.m21 = sg * m.m21;
	MtxRGB2XYZ.m22 = sb * m.m22;

	MtxTranspose3x3(MtxRGB2XYZ);

	MtxInvert3x3(MtxRGB2XYZ, MtxXYZ2RGB);
}

//function GetRGBModel.Gamma()
//{
//	switch (SelectedRGBModel.Gamma)
//	{
//		case 0:	/* 1.0 */
//			RGBModel.Gamma = 1.0;
//			break;
//		case 1:	/* 1.8 */
//			RGBModel.Gamma = 1.8;
//			break;
//		case 2:	/* 2.2 */
//			RGBModel.Gamma = 2.2;
//			break;
//		case 3:	/* sRGB */
//			RGBModel.Gamma = -2.2;
//			break;
//		case 4: /* L* */
//			RGBModel.Gamma = 0.0;
//			break;
//	}
//	return(RGBModel.Gamma);
//}

function GetAdaptation(SelectedAdaptationMethod)
{
	switch (SelectedAdaptationMethod)
	{
		case 0:	/* Bradford */
			MtxAdaptMa.m00 =  0.8951;
			MtxAdaptMa.m01 = -0.7502;
			MtxAdaptMa.m02 =  0.0389;
			MtxAdaptMa.m10 =  0.2664;
			MtxAdaptMa.m11 =  1.7135;
			MtxAdaptMa.m12 = -0.0685;
			MtxAdaptMa.m20 = -0.1614;
			MtxAdaptMa.m21 =  0.0367;
			MtxAdaptMa.m22 =  1.0296;

			MtxInvert3x3(MtxAdaptMa, MtxAdaptMaI);

			AdaptationMethod = "Bradford";
			break;
		case 1:	/* von Kries */
			MtxAdaptMa.m00 =  0.40024;
			MtxAdaptMa.m01 = -0.22630;
			MtxAdaptMa.m02 =  0.00000;
			MtxAdaptMa.m10 =  0.70760;
			MtxAdaptMa.m11 =  1.16532;
			MtxAdaptMa.m12 =  0.00000;
			MtxAdaptMa.m20 = -0.08081;
			MtxAdaptMa.m21 =  0.04570;
			MtxAdaptMa.m22 =  0.91822;

			MtxInvert3x3(MtxAdaptMa, MtxAdaptMaI);

			AdaptationMethod = "von Kries";
			break;
		case 2:	/* XYZ Scaling */
		case 3:	/* None */
			MtxAdaptMa.m00 = 1.0;
			MtxAdaptMa.m01 = 0.0;
			MtxAdaptMa.m02 = 0.0;
			MtxAdaptMa.m10 = 0.0;
			MtxAdaptMa.m11 = 1.0;
			MtxAdaptMa.m12 = 0.0;
			MtxAdaptMa.m20 = 0.0;
			MtxAdaptMa.m21 = 0.0;
			MtxAdaptMa.m22 = 1.0;

			MtxAdaptMaI.m00 = 1.0;
			MtxAdaptMaI.m01 = 0.0;
			MtxAdaptMaI.m02 = 0.0;
			MtxAdaptMaI.m10 = 0.0;
			MtxAdaptMaI.m11 = 1.0;
			MtxAdaptMaI.m12 = 0.0;
			MtxAdaptMaI.m20 = 0.0;
			MtxAdaptMaI.m21 = 0.0;
			MtxAdaptMaI.m22 = 1.0;

			AdaptationMethod = "XYZ Scaling / None";
			break;
	}
}

function ChromaticAdaptationXYZ(XYZ)
{
	if (SelectedAdaptationMethod != 3)
	{
		var As = SourceWhite.X * MtxAdaptMa.m00 + SourceWhite.Y * MtxAdaptMa.m10 + SourceWhite.Z * MtxAdaptMa.m20;
		var Bs = SourceWhite.X * MtxAdaptMa.m01 + SourceWhite.Y * MtxAdaptMa.m11 + SourceWhite.Z * MtxAdaptMa.m21;
		var Cs = SourceWhite.X * MtxAdaptMa.m02 + SourceWhite.Y * MtxAdaptMa.m12 + SourceWhite.Z * MtxAdaptMa.m22;

		var Ad = RefWhite.X * MtxAdaptMa.m00 + RefWhite.Y * MtxAdaptMa.m10 + RefWhite.Z * MtxAdaptMa.m20;
		var Bd = RefWhite.X * MtxAdaptMa.m01 + RefWhite.Y * MtxAdaptMa.m11 + RefWhite.Z * MtxAdaptMa.m21;
		var Cd = RefWhite.X * MtxAdaptMa.m02 + RefWhite.Y * MtxAdaptMa.m12 + RefWhite.Z * MtxAdaptMa.m22;

		var X1 = XYZ.X * MtxAdaptMa.m00 + XYZ.Y * MtxAdaptMa.m10 + XYZ.Z * MtxAdaptMa.m20;
		var Y1 = XYZ.X * MtxAdaptMa.m01 + XYZ.Y * MtxAdaptMa.m11 + XYZ.Z * MtxAdaptMa.m21;
		var Z1 = XYZ.X * MtxAdaptMa.m02 + XYZ.Y * MtxAdaptMa.m12 + XYZ.Z * MtxAdaptMa.m22;

		X1 *= (Ad / As);
		Y1 *= (Bd / Bs);
		Z1 *= (Cd / Cs);

		XYZ.X = X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;
		XYZ.Y = X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;
		XYZ.Z = X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;
	}
	XYZ.Source = SourceWhite.Name;
	XYZ.Reference = RefWhite.Name;
	XYZ.Adaptation = AdaptationMethod;
	return(CheckXYZ(XYZ));
}

function CheckXYZ(XYZ)
{
	XYZ.X = (XYZ.X < 0.0) ? 0.0 : XYZ.X;
	XYZ.Y = (XYZ.Y < 0.0) ? 0.0 : XYZ.Y;
	XYZ.Z = (XYZ.Z < 0.0) ? 0.0 : XYZ.Z;
	return(XYZ);
}

function XYZ2RGB(XYZ)
{
	let RGB = {};

	var X2 = XYZ.X;
	var Y2 = XYZ.Y;
	var Z2 = XYZ.Z;

	if (SelectedAdaptationMethod != 3)
	{
		var As = RefWhite.X * MtxAdaptMa.m00 + RefWhite.Y * MtxAdaptMa.m10 + RefWhite.Z * MtxAdaptMa.m20;
		var Bs = RefWhite.X * MtxAdaptMa.m01 + RefWhite.Y * MtxAdaptMa.m11 + RefWhite.Z * MtxAdaptMa.m21;
		var Cs = RefWhite.X * MtxAdaptMa.m02 + RefWhite.Y * MtxAdaptMa.m12 + RefWhite.Z * MtxAdaptMa.m22;

		var Ad = RGBModel.Xw * MtxAdaptMa.m00 + RGBModel.Yw * MtxAdaptMa.m10 + RGBModel.Zw * MtxAdaptMa.m20;
		var Bd = RGBModel.Xw * MtxAdaptMa.m01 + RGBModel.Yw * MtxAdaptMa.m11 + RGBModel.Zw * MtxAdaptMa.m21;
		var Cd = RGBModel.Xw * MtxAdaptMa.m02 + RGBModel.Yw * MtxAdaptMa.m12 + RGBModel.Zw * MtxAdaptMa.m22;

		var X1 = XYZ.X * MtxAdaptMa.m00 + XYZ.Y * MtxAdaptMa.m10 + XYZ.Z * MtxAdaptMa.m20;
		var Y1 = XYZ.X * MtxAdaptMa.m01 + XYZ.Y * MtxAdaptMa.m11 + XYZ.Z * MtxAdaptMa.m21;
		var Z1 = XYZ.X * MtxAdaptMa.m02 + XYZ.Y * MtxAdaptMa.m12 + XYZ.Z * MtxAdaptMa.m22;

		X1 *= (Ad / As);
		Y1 *= (Bd / Bs);
		Z1 *= (Cd / Cs);

		X2 = X1 * MtxAdaptMaI.m00 + Y1 * MtxAdaptMaI.m10 + Z1 * MtxAdaptMaI.m20;
		Y2 = X1 * MtxAdaptMaI.m01 + Y1 * MtxAdaptMaI.m11 + Z1 * MtxAdaptMaI.m21;
		Z2 = X1 * MtxAdaptMaI.m02 + Y1 * MtxAdaptMaI.m12 + Z1 * MtxAdaptMaI.m22;
	}

	RGB.R = Compand(X2 * MtxXYZ2RGB.m00 + Y2 * MtxXYZ2RGB.m10 + Z2 * MtxXYZ2RGB.m20);
	RGB.G = Compand(X2 * MtxXYZ2RGB.m01 + Y2 * MtxXYZ2RGB.m11 + Z2 * MtxXYZ2RGB.m21);
	RGB.B = Compand(X2 * MtxXYZ2RGB.m02 + Y2 * MtxXYZ2RGB.m12 + Z2 * MtxXYZ2RGB.m22);

	RGB.Model = RGBModel.Name;
	RGB.Source = SourceWhite.Name;
	RGB.Reference = RGBModel.Reference;
	RGB.Adaptation = AdaptationMethod;
	RGB.Gamma = RGBModel.Gamma;
	RGB.HEX = RGB2Hex(RGB);
	return(RGB);
}

function RGB2Hex(RGB)
{
	RGB.R = (RGB.R < 0.0) ? 0.0 : (RGB.R > 1.0) ? 1 : RGB.R;
	RGB.G = (RGB.G < 0.0) ? 0.0 : (RGB.G > 1.0) ? 1 : RGB.G;
	RGB.B = (RGB.B < 0.0) ? 0.0 : (RGB.B > 1.0) ? 1 : RGB.B;

	var R = (Math.round(RGB.R * 255)).toString(16);
	var G = (Math.round(RGB.G * 255)).toString(16);
	var B = (Math.round(RGB.B * 255)).toString(16);

	if (R.length == 1)
		R = "0" + R;
	if (G.length == 1)
		G = "0" + G;
	if (B.length == 1)
		B = "0" + B;
	return("#" + R + G + B);
}

function RGB2XYZ(RGB)
{
	let XYZ = {};

	var R = InvCompand(RGB.R);
	var G = InvCompand(RGB.G);
	var B = InvCompand(RGB.B);

	XYZ.X = R * MtxRGB2XYZ.m00 + G * MtxRGB2XYZ.m10 + B * MtxRGB2XYZ.m20;
	XYZ.Y = R * MtxRGB2XYZ.m01 + G * MtxRGB2XYZ.m11 + B * MtxRGB2XYZ.m21;
	XYZ.Z = R * MtxRGB2XYZ.m02 + G * MtxRGB2XYZ.m12 + B * MtxRGB2XYZ.m22;

	if (SelectedAdaptationMethod != 3)
	{
		var Ad = RefWhite.X * MtxAdaptMa.m00 + RefWhite.Y * MtxAdaptMa.m10 + RefWhite.Z * MtxAdaptMa.m20;
		var Bd = RefWhite.X * MtxAdaptMa.m01 + RefWhite.Y * MtxAdaptMa.m11 + RefWhite.Z * MtxAdaptMa.m21;
		var Cd = RefWhite.X * MtxAdaptMa.m02 + RefWhite.Y * MtxAdaptMa.m12 + RefWhite.Z * MtxAdaptMa.m22;

		var As = RGBModel.Xw * MtxAdaptMa.m00 + RGBModel.Yw * MtxAdaptMa.m10 + RGBModel.Zw * MtxAdaptMa.m20;
		var Bs = RGBModel.Xw * MtxAdaptMa.m01 + RGBModel.Yw * MtxAdaptMa.m11 + RGBModel.Zw * MtxAdaptMa.m21;
		var Cs = RGBModel.Xw * MtxAdaptMa.m02 + RGBModel.Yw * MtxAdaptMa.m12 + RGBModel.Zw * MtxAdaptMa.m22;
		
		var X = XYZ.X * MtxAdaptMa.m00 + XYZ.Y * MtxAdaptMa.m10 + XYZ.Z * MtxAdaptMa.m20;
		var Y = XYZ.X * MtxAdaptMa.m01 + XYZ.Y * MtxAdaptMa.m11 + XYZ.Z * MtxAdaptMa.m21;
		var Z = XYZ.X * MtxAdaptMa.m02 + XYZ.Y * MtxAdaptMa.m12 + XYZ.Z * MtxAdaptMa.m22;

		X *= (Ad / As);
		Y *= (Bd / Bs);
		Z *= (Cd / Cs);

		XYZ.X = X * MtxAdaptMaI.m00 + Y * MtxAdaptMaI.m10 + Z * MtxAdaptMaI.m20;
		XYZ.Y = X * MtxAdaptMaI.m01 + Y * MtxAdaptMaI.m11 + Z * MtxAdaptMaI.m21;
		XYZ.Z = X * MtxAdaptMaI.m02 + Y * MtxAdaptMaI.m12 + Z * MtxAdaptMaI.m22;
	}
	return(XYZ);
}

function Compand(linear)
{
	var companded;
	if (RGBModel.Gamma > 0.0)
	{
		companded = (linear >= 0.0) ? Math.pow(linear, 1.0 / RGBModel.Gamma) : -Math.pow(-linear, 1.0 / RGBModel.Gamma);
	}
	else if (RGBModel.Gamma < 0.0)
	{
		/* sRGB */
		var sign = 1.0;
		if (linear < 0.0)
		{
			sign = -1.0;
			linear = -linear;
		}
		companded = (linear <= 0.0031308) ? (linear * 12.92) : (1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055);
		companded *= sign;
	}
	else
	{
		/* L* */
		var sign = 1.0;
		if (linear < 0.0)
		{
			sign = -1.0;
			linear = -linear;
		}
		companded = (linear <= (216.0 / 24389.0)) ? (linear * 24389.0 / 2700.0) : (1.16 * Math.pow(linear, 1.0 / 3.0) - 0.16);
		companded *= sign;
	}
	return(companded);
}

function InvCompand(companded)
{
	var linear;
	if (RGBModel.Gamma > 0.0)
	{
		linear = (companded >= 0.0) ? Math.pow(companded, RGBModel.Gamma) : -Math.pow(-companded, RGBModel.Gamma);
	}
	else if (RGBModel.Gamma < 0.0)
	{
		/* sRGB */
		var sign = 1.0;
		if (companded < 0.0)
		{
			sign = -1.0;
			companded = -companded;
		}
		linear = (companded <= 0.04045) ? (companded / 12.92) : Math.pow((companded + 0.055) / 1.055, 2.4);
		linear *= sign;
	}
	else
	{
		/* L* */
		var sign = 1.0;
		if (companded < 0.0)
		{
			sign = -1.0;
			companded = -companded;
		}
		linear = (companded <= 0.08) ? (2700.0 * companded / 24389.0) : ((((1000000.0 * companded + 480000.0) * companded + 76800.0) * companded + 4096.0) / 1560896.0);
		linear *= sign;
	}
	return(linear);
}

function XYZ2xyY(XYZ)
{
	let xyY = {};

	var XYZSum = XYZ.X + XYZ.Y + XYZ.Z;
	if (XYZSum > 0.0)
	{
		xyY.x = XYZ.X / XYZSum;
		xyY.y = XYZ.Y / XYZSum;
		xyY.Y = XYZ.Y;
	}
	else
	{
		xyY.x = RefWhite.X / (RefWhite.X + RefWhite.Y + RefWhite.Z);
		xyY.y = RefWhite.Y / (RefWhite.X + RefWhite.Y + RefWhite.Z);
		xyY.Y = RefWhite.Y;
	}
	xyY.Source = SourceWhite.Name;
	xyY.Reference = RefWhite.Name;
	xyY.Adaptation = AdaptationMethod;
	return(xyY);
}

function XYZ2Lab(XYZ)
{
	let Lab = {};

	var xr = XYZ.X / RefWhite.X;
	var yr = XYZ.Y / RefWhite.Y;
	var zr = XYZ.Z / RefWhite.Z;

	var fx = (xr > kE) ? Math.pow(xr, 1.0 / 3.0) : ((kK * xr + 16.0) / 116.0);
	var fy = (yr > kE) ? Math.pow(yr, 1.0 / 3.0) : ((kK * yr + 16.0) / 116.0);
	var fz = (zr > kE) ? Math.pow(zr, 1.0 / 3.0) : ((kK * zr + 16.0) / 116.0);

	Lab.L = (116.0 * fy - 16.0).toFixed(4);
	Lab.a = (500.0 * (fx - fy)).toFixed(4);
	Lab.b = (200.0 * (fy - fz)).toFixed(4);

	Lab.L = (Lab.L < 0.0) ? 0.0 : (Lab.L > 100.0) ? 100.0 : Lab.L;
	Lab.Source = SourceWhite.Name;
	Lab.Reference = RefWhite.Name;
	Lab.Adaptation = AdaptationMethod;
	return(Lab);
}

function Lab2XYZ(Lab)
{
	let XYZ = {};

	var fy = (Lab.L + 16.0) / 116.0;
	var fx = 0.002 * Lab.a + fy;
	var fz = fy - 0.005 * Lab.b;

	var fx3 = fx * fx * fx;
	var fz3 = fz * fz * fz;

	var xr = (fx3 > kE) ? fx3 : ((116.0 * fx - 16.0) / kK);
	var yr = (Lab.L > kKE) ? Math.pow(((Lab.L + 16.0) / 116.0), 3.0) : (Lab.L / kK);
	var zr = (fz3 > kE) ? fz3 : ((116.0 * fz - 16.0) / kK);

	XYZ.X = xr * RefWhite.X;
	XYZ.Y = yr * RefWhite.Y;
	XYZ.Z = zr * RefWhite.Z;

	XYZ.Source = SourceWhite.Name;
	XYZ.Reference = RefWhite.Name;
	XYZ.Adaptation = AdaptationMethod;
	return(CheckXYZ(XYZ));
}

function XYZ2Luv(XYZ)
{
	let Luv = {};

	var Den = XYZ.X + 15.0 * XYZ.Y + 3.0 * XYZ.Z;
	var up = (Den > 0.0) ? ((4.0 * XYZ.X) / (XYZ.X + 15.0 * XYZ.Y + 3.0 * XYZ.Z)) : 0.0;
	var vp = (Den > 0.0) ? ((9.0 * XYZ.Y) / (XYZ.X + 15.0 * XYZ.Y + 3.0 * XYZ.Z)) : 0.0;

	var urp = (4.0 * RefWhite.X) / (RefWhite.X + 15.0 * RefWhite.Y + 3.0 * RefWhite.Z);
	var vrp = (9.0 * RefWhite.Y) / (RefWhite.X + 15.0 * RefWhite.Y + 3.0 * RefWhite.Z);
	
	var yr = XYZ.Y / RefWhite.Y;

	Luv.L = (yr > kE) ? (116.0 * Math.pow(yr, 1.0 / 3.0) - 16.0) : (kK * yr);
	Luv.u = 13.0 * Luv.L * (up - urp);
	Luv.v = 13.0 * Luv.L * (vp - vrp);

	Luv.L = (Luv.L < 0.0) ? 0.0 : (Luv.L > 100.0) ? 100.0 : Luv.L;

	Luv.L = Luv.L.toFixed(4);
	Luv.u = Luv.u.toFixed(4);
	Luv.v = Luv.v.toFixed(4);
	Luv.Source = SourceWhite.Name;
	Luv.Reference = RefWhite.Name;
	Luv.Adaptation = AdaptationMethod;
	return(Luv);
}

function Lab2LCHab(Lab)
{
	let LCHab = {};

	LCHab.L = Lab.L;
	LCHab.C = Math.sqrt(Lab.a * Lab.a + Lab.b * Lab.b);
	LCHab.H = 180.0 * Math.atan2(Lab.b, Lab.a) / Math.PI;

	LCHab.L = (LCHab.L < 0.0) ? 0.0 : (LCHab.L > 100.0) ? 100.0 : LCHab.L;
	LCHab.C = (LCHab.C < 0.0) ? 0.0 : LCHab.C;
	while (LCHab.H < 0.0)
	{
		LCHab.H += 360.0;
	}
	while (LCHab.H > 0.0)
	{
		LCHab.H -= 360.0;
	}

	LCHab.L = LCHab.L.toFixed(4);
	LCHab.C = LCHab.C.toFixed(4);
	LCHab.H = LCHab.H.toFixed(4);
	return(LCHab);
}

function LCHab2Lab(LCHab)
{
	let Lab = {};

	Lab.L = (LCHab.L).toFixed(4);
	Lab.a = (LCHab.C * Math.cos(LCHab.H * Math.PI / 180.0)).toFixed(4);
	Lab.b = (LCHab.C * Math.sin(LCHab.H * Math.PI / 180.0)).toFixed(4);

	Lab.L = (Lab.L < 0.0) ? 0.0 : (Lab.L > 100.0) ? 100.0 : Lab.L;
	return(Lab);
}

function Luv2LCHuv(Luv)
{
	let LCHuv = {};

	LCHuv.L = Luv.L;
	LCHuv.C = Math.sqrt(Luv.u * Luv.u + Luv.v * Luv.v);
	LCHuv.H = 180.0 * Math.atan2(Luv.v, Luv.u) / Math.PI;

	LCHuv.L = (LCHuv.L < 0.0) ? 0.0 : (LCHuv.L > 100.0) ? 100.0 : LCHuv.L;
	LCHuv.C = (LCHuv.C < 0.0) ? 0.0 : LCHuv.C;
	while (LCHuv.H < 0.0)
	{
		LCHuv.H += 360.0;
	}
	while (LCHuv.H >= 360.0)
	{
		LCHuv.H -= 360.0;
	}

	LCHuv.L = LCHuv.L.toFixed(4);
	LCHuv.C = LCHuv.C.toFixed(4);
	LCHuv.H = LCHuv.H.toFixed(4);
	return(LCHuv);
}

function LCHuv2Luv(LCHuv)
{
	let Luv = {};

	Luv.L = LCHuv.L;
	Luv.u = LCHuv.C * Math.cos(LCHuv.H * Math.PI / 180.0);
	Luv.v = LCHuv.C * Math.sin(LCHuv.H * Math.PI / 180.0);

	Luv.L = (Luv.L < 0.0) ? 0.0 : (Luv.L > 100.0) ? 100.0 : Luv.L;
	return(Luv);
}

function XYZ2HunterLab(XYZ)
{
	var Ka = (175.0 / 198.04) * (RefWhite.Y * 100 + RefWhite.X * 100);
	var Kb = (70.0 / 218.11) * (RefWhite.Y * 100 + RefWhite.Z * 100);

	let HunterLab = {};

	HunterLab.L = 100.0 * Math.sqrt(XYZ.Y / RefWhite.Y );
	HunterLab.a = Ka * (((XYZ.X / RefWhite.X) - (XYZ.Y / RefWhite.Y) ) / Math.sqrt(XYZ.Y / RefWhite.Y));
	HunterLab.b = Kb * (((XYZ.Y / RefWhite.Y) - (XYZ.Z / RefWhite.Z) ) / Math.sqrt(XYZ.Y / RefWhite.Y));

	HunterLab.L = HunterLab.L.toFixed(4);
	HunterLab.a = HunterLab.a.toFixed(4);
	HunterLab.b = HunterLab.b.toFixed(4);
	HunterLab.Source = SourceWhite.Name;
	HunterLab.Reference = RefWhite.Name;
	HunterLab.Adaptation = AdaptationMethod;
	return(HunterLab);
}

function XYZ2CCT_McCamy(XYZ)
{
	let xyY = XYZ2xyY(XYZ);

	var n = (xyY.x - 0.3320) / (0.1858 - xyY.y);
	var CCT = (449.0 * Math.pow(n, 3)) + (3525.0 * Math.pow(n, 2)) + (6823.3 * n) + 5520.33;

	CCT = ((CCT >= (10000.0 / 6.0)) && (CCT <= 25000.0)) ? CCT.toFixed(1) : "N/A";
	return(CCT);
}

function XYZ2CCT_Robertson(XYZ)
{
	var CCT;

	var rt = [	/* reciprocal temperature (K) */
			  0.0e-6,  10.0e-6,  20.0e-6,  30.0e-6,  40.0e-6,  50.0e-6,
			  60.0e-6,  70.0e-6,  80.0e-6,  90.0e-6, 100.0e-6, 125.0e-6,
			  150.0e-6, 175.0e-6, 200.0e-6, 225.0e-6, 250.0e-6, 275.0e-6,
			  300.0e-6, 325.0e-6, 350.0e-6, 375.0e-6, 400.0e-6, 425.0e-6,
			  450.0e-6, 475.0e-6, 500.0e-6, 525.0e-6, 550.0e-6, 575.0e-6,
			  600.0e-6
			  ];
	var u = [
			 0.18006, 0.18066, 0.18133, 0.18208, 0.18293, 0.18388, 
			 0.18494, 0.18611, 0.18740, 0.18880, 0.19032, 0.19462, 
			 0.19962, 0.20525, 0.21142, 0.21807, 0.22511, 0.23247, 
			 0.24010, 0.24792, 0.25591, 0.26400, 0.27218, 0.28039, /* 0.24792 is correct, W&S shows as 0.24702 which is a typo */
			 0.28863, 0.29685, 0.30505, 0.31320, 0.32129, 0.32931, 
			 0.33724
			 ];
	var v = [
			 0.26352, 0.26589, 0.26846, 0.27119, 0.27407, 0.27709, 
			 0.28021, 0.28342, 0.28668, 0.28997, 0.29326, 0.30141, 
			 0.30921, 0.31647, 0.32312, 0.32909, 0.33439, 0.33904, 
			 0.34308, 0.34655, 0.34951, 0.35200, 0.35407, 0.35577, 
			 0.35714, 0.35823, 0.35907, 0.35968, 0.36011, 0.36038, 
			 0.36051
			 ];
	var t = [
			 -0.24341, -0.25479, -0.26876, -0.28539, -0.30470, -0.32675,
			 -0.35156, -0.37915, -0.40955, -0.44278, -0.47888, -0.58204,
			 -0.70471, -0.84901, -1.0182,  -1.2168,  -1.4512,  -1.7298,
			 -2.0637,  -2.4681,  -2.9641,  -3.5814,  -4.3633,  -5.3762,
			 -6.7262,  -8.5955,  -11.324,  -15.628,  -23.325,  -40.770,
			 -116.45
			 ];
	var us = (4.0 * XYZ.X) / (XYZ.X + 15.0 * XYZ.Y + 3.0 * XYZ.Z);
	var vs = (6.0 * XYZ.Y) / (XYZ.X + 15.0 * XYZ.Y + 3.0 * XYZ.Z);
	var prevVertDist = 0.0;
	var thisVertDist = 0.0;
	var i = 0;

	for (i = 0; i < 31; i++)
	{
		thisVertDist = (vs - v[i]) - t[i] * (us - u[i]);
		if ((i == 0) && (thisVertDist <= 0.0))
		{
			CCT = -10.0;	/* cannot convert: color is too blue */
			return;
		}
		if ((i > 0) && (thisVertDist <= 0.0))
			break;	/* found lines bounding (us, vs) : i-1 and i */
		prevVertDist = thisVertDist;
	}
	if (i == 31)
	{
		CCT = -10.0;	/* cannot convert: color is too red */
	}
	else
	{
		var thisPerpDist = thisVertDist / Math.sqrt(1.0 + t[i] * t[i]);
		var prevPerpDist = prevVertDist / Math.sqrt(1.0 + t[i-1] * t[i-1]);
		var w = prevPerpDist / (prevPerpDist - thisPerpDist);		/* w = lerping parameter, 0 : i-1, 1 : i */
		CCT = 1.0 / ((rt[i] - rt[i-1]) * w + rt[i-1]);			/* 1.0 / (LERP(rt[i-1], rt[i], w)) */
	}
	CCT = ((CCT >= (10000.0 / 6.0)) && (CCT <= 25000.0)) ? CCT.toFixed(1) : "N/A";
	return(CCT);
}

function XYZ2DominantWavelength(XYZ)
{
	let xyY = XYZ2xyY(XYZ);

	var xr = RefWhite.X / (RefWhite.X + RefWhite.Y + RefWhite.Z);
	var yr = RefWhite.Y / (RefWhite.X + RefWhite.Y + RefWhite.Z);

	var DominantWavelength;
	var count = 0;
	var tArray = [0.0, 0.0];	// t
	var wArray = [0.0, 0.0];	// wavelength
	var cArray = [0, 0];		// cycle

	var nm;

	var a = xyY.x - xr;
	var b = xyY.y - yr;

	if ((a >= -0.000001) && (a <= 0.000001) && (b >= -0.000001) && (b <= 0.000001))
	{
		return(0.0);	// cannot compute the dominant wavelength, because (xyY.x, xyY.y) is the same as (xr, yr)
	}

	for (nm = 360; nm <= 830; nm += 5)
	{
		var i1 = (nm - 360) / 5;
		var i2 = (nm == 830) ? 0 : i1 + 1;
		var nm2 = 5 * i2 + 360;

		var x1 = CIE1931StandardObserver[nm][0] / (CIE1931StandardObserver[nm][0] + CIE1931StandardObserver[nm][1] + CIE1931StandardObserver[nm][2]);
		var y1 = CIE1931StandardObserver[nm][1] / (CIE1931StandardObserver[nm][0] + CIE1931StandardObserver[nm][1] + CIE1931StandardObserver[nm][2]);
		var x2 = CIE1931StandardObserver[nm2][0] / (CIE1931StandardObserver[nm2][0] + CIE1931StandardObserver[nm2][1] + CIE1931StandardObserver[nm2][2]);
		var y2 = CIE1931StandardObserver[nm2][1] / (CIE1931StandardObserver[nm2][0] + CIE1931StandardObserver[nm2][1] + CIE1931StandardObserver[nm2][2]);

		var c = x1 - xr;
		var d = y1 - yr;
		var e = x2 - x1;
		var f = y2 - y1;

		var s = (a * d - b * c) / (b * e - a * f);
		if ((s < 0.0) || (s >= 1.0))
		{
			continue;
		}

		var t = (Math.abs(a) >= Math.abs(b)) ? ((e * s + c) / a) : ((f * s + d) / b);
		tArray[count] = t;
		cArray[count] = nm;
		wArray[count] = (nm2 - nm) * s + nm;
		count += 1;
	}

	if ((cArray[1] == 830) && (tArray[1] > 0.0))
	{
		DominantWavelength = -wArray[0];
	}
	else
	{
		DominantWavelength = (tArray[0] >= 0.0) ? wArray[0] : wArray[1];
	}

	DominantWavelength = (DominantWavelength != 0.0) ? DominantWavelength.toFixed(1) : "N/A";
	return(DominantWavelength);
}

// Reference: Lab1
// Sample: Lab2
function DeltaE1976(Lab1, Lab2)
{
	var delL = Lab1.L - Lab2.L;
	var dela = Lab1.a - Lab2.a;
	var delb = Lab1.b - Lab2.b;
	var DE1976 = Math.sqrt(delL * delL + dela * dela + delb * delb);
	return(DE1976.toFixed(6));
}

// Reference: Lab1
// Sample: Lab2
function DeltaE1994(Lab1, Lab2)
{
	var textiles = false;
	var k1 = (textiles == true) ? 0.048 : 0.045;
	var k2 = (textiles == true) ? 0.014 : 0.015;
	var kL = (textiles == true) ? 2.000 : 1.000;
	var kC = 1.0;
	var kH = 1.0;

	var C1 = Math.sqrt(Lab1.a * Lab1.a + Lab1.b * Lab1.b);
	var C2 = Math.sqrt(Lab2.a * Lab2.a + Lab2.b * Lab2.b);

	var delA = Lab1.a - Lab2.a;
	var delB = Lab1.b - Lab2.b;
	var delC = C1 - C2;
	var delH2 = delA * delA + delB * delB - delC * delC;
	var delH = (delH2 > 0.0) ? Math.sqrt(delH2) : 0.0;
	var delL = Lab1.L - Lab2.L;

	var sL = 1.0;
	var sC = 1.0 + k1 * C1;
	var sH = 1.0 + k2 * C1;

	var vL = delL / (kL * sL);
	var vC = delC / (kC * sC);
	var vH = delH / (kH * sH);

//	if (textiles == true)
//	{
//		DE1994_Textiles = Math.sqrt(vL * vL + vC * vC + vH * vH);
//	}
//	else
//	{
//		DE1994_GraphicArts = Math.sqrt(vL * vL + vC * vC + vH * vH);
//	}

	var DE1994 = Math.sqrt(vL * vL + vC * vC + vH * vH);
	return(DE1994.toFixed(6));
}

// Reference: Lab1
// Sample: Lab2
function DeltaE2000(Lab1, Lab2)
{
	var kL = 1.0;
	var kC = 1.0;
	var kH = 1.0;
	var lBarPrime = 0.5 * (Lab1.L * 1 + Lab2.L * 1);
	var c1 = Math.sqrt(Lab1.a * Lab1.a + Lab1.b * Lab1.b);
	var c2 = Math.sqrt(Lab2.a * Lab2.a + Lab2.b * Lab2.b);
	var cBar = 0.5 * (c1 + c2);
	var cBar7 = cBar * cBar * cBar * cBar * cBar * cBar * cBar;
	var g = 0.5 * (1.0 - Math.sqrt(cBar7 / (cBar7 + 6103515625.0)));	/* 6103515625 = 25^7 */
	var a1Prime = Lab1.a * (1.0 + g);
	var a2Prime = Lab2.a * (1.0 + g);
	var c1Prime = Math.sqrt(a1Prime * a1Prime + Lab1.b * Lab1.b);
	var c2Prime = Math.sqrt(a2Prime * a2Prime + Lab2.b * Lab2.b);
	var cBarPrime = 0.5 * (c1Prime + c2Prime);
	var h1Prime = (Math.atan2(Lab1.b, a1Prime) * 180.0) / Math.PI;
	if (h1Prime < 0.0)
		h1Prime += 360.0;
	var h2Prime = (Math.atan2(Lab2.b, a2Prime) * 180.0) / Math.PI;
	if (h2Prime < 0.0)
		h2Prime += 360.0;
	var hBarPrime = (Math.abs(h1Prime - h2Prime) > 180.0) ? (0.5 * (h1Prime + h2Prime + 360.0)) : (0.5 * (h1Prime + h2Prime));
	var t = 1.0 -
			0.17 * Math.cos(Math.PI * (      hBarPrime - 30.0) / 180.0) +
			0.24 * Math.cos(Math.PI * (2.0 * hBarPrime       ) / 180.0) +
			0.32 * Math.cos(Math.PI * (3.0 * hBarPrime +  6.0) / 180.0) -
			0.20 * Math.cos(Math.PI * (4.0 * hBarPrime - 63.0) / 180.0);
	if (Math.abs(h2Prime - h1Prime) <= 180.0) 
		dhPrime = h2Prime - h1Prime;
	else 
		dhPrime = (h2Prime <= h1Prime) ? (h2Prime - h1Prime + 360.0) : (h2Prime - h1Prime - 360.0);
	var dLPrime = Lab2.L - Lab1.L;
	var dCPrime = c2Prime - c1Prime;
	var dHPrime = 2.0 * Math.sqrt(c1Prime * c2Prime) * Math.sin(Math.PI * (0.5 * dhPrime) / 180.0);
	var sL = 1.0 + ((0.015 * (lBarPrime - 50.0) * (lBarPrime - 50.0)) / Math.sqrt(20.0 + (lBarPrime - 50.0) * (lBarPrime - 50.0)));
	var sC = 1.0 + 0.045 * cBarPrime;
	var sH = 1.0 + 0.015 * cBarPrime * t;
	var dTheta = 30.0 * Math.exp(-((hBarPrime - 275.0) / 25.0) * ((hBarPrime - 275.0) / 25.0));
	var cBarPrime7 = cBarPrime * cBarPrime * cBarPrime * cBarPrime * cBarPrime * cBarPrime * cBarPrime;
	var rC = Math.sqrt(cBarPrime7 / (cBarPrime7 + 6103515625.0));
	var rT = -2.0 * rC * Math.sin(Math.PI * (2.0 * dTheta) / 180.0);
	var DE2000 = Math.sqrt(
			(dLPrime / (kL * sL)) * (dLPrime / (kL * sL)) +
			(dCPrime / (kC * sC)) * (dCPrime / (kC * sC)) +
			(dHPrime / (kH * sH)) * (dHPrime / (kH * sH)) +
			(dCPrime / (kC * sC)) * (dHPrime / (kH * sH)) * rT);
	return(DE2000.toFixed(6));
}

// Reference: Lab1
// Sample: Lab2
function DeltaECMC(L, C)
{
	var c1 = Math.sqrt(Lab1.a * Lab1.a + Lab1.b * Lab1.b);
	var c2 = Math.sqrt(Lab2.a * Lab2.a + Lab2.b * Lab2.b);
	var sl = (Lab1.L < 16.0) ? (0.511) : ((0.040975 * Lab1.L) / (1.0 + 0.01765 * Lab1.L));
	var sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
	var h1 = (c1 < 0.000001) ? 0.0 : ((Math.atan2(Lab1.b, Lab1.a) * 180.0) / Math.PI);
	while (h1 < 0.0)
		h1 += 360.0;
	while (h1 >= 360.0)
		h1 -= 360.0;
	var t = ((h1 >= 164.0) && (h1 <= 345.0)) ? (0.56 + Math.abs(0.2 * Math.cos((Math.PI * (h1 + 168.0)) / 180.0))) : (0.36 + Math.abs(0.4 * Math.cos((Math.PI * (h1 + 35.0)) / 180.0)));
	var c4 = c1 * c1 * c1 * c1;
	var f = Math.sqrt(c4 / (c4 + 1900.0));
	var sh = sc * (f * t + 1.0 - f);
	var delL = Lab1.L - Lab2.L;
	var delC = c1 - c2;
	var delA = Lab1.a - Lab2.a;
	var delB = Lab1.b - Lab2.b;
	var dH2 = delA * delA + delB * delB - delC * delC;
	var v1 = delL / (L * sl);
	var v2 = delC / (C * sc);
	var v3 = sh;
	if (L == 2.0)
	{
		DECMC_21 = Math.sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
	}
	else
	{
		DECMC_11 = Math.sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
	}
}

function SortByDeltaE( a, b ) {
	if ( a.DeltaE < b.DeltaE ){
		return -1;
	}
	if ( a.DeltaE > b.DeltaE ){
		return 1;
	}
	return 0;
}

function NearestColors(XYZ, Lab, SelectedColorScale) {
	var ColorScale = GetColorScale(XYZ, Lab, SelectedColorScale);

	if (ColorScale.Name == "None") {
		return({Note: 'No color scale selected'});
	} else if (XYZ.Reference != ColorScale.ColorReference) {
		return({Note: 'Reference White mismatch'});
	} else {
		let ReferenceColors = Object.entries(ColorScale.Index).map(entry => {
			let ReferenceName = entry[0];
			let Values = entry[1].split(/\s*,\s*/);
			let ReferenceColor = {
				L: parseFloat(Values[0]),
				a: parseFloat(Values[1]),
				b: parseFloat(Values[2])
			};
			let DeltaE = parseFloat(DeltaE1976(ReferenceColor, Lab));
			return {
				ReferenceName,
				ReferenceColor,
				DeltaE
			};
		});
		let NearestReferenceColors = ReferenceColors.sort(SortByDeltaE);
		NearestReferenceColors = NearestReferenceColors.slice(0, 3);
		return(NearestReferenceColors.map(item => item.ReferenceName + ' (<var>CIE1976 ΔE<sup>*</sup><sub>ab</sub>:</var> ' + item.DeltaE.toFixed(4) +')'));
	}
}

function LightIntensity2Transmission(IncidentLight, TransmittedLight) {
	let Transmission = {};
	for (var i in IncidentLight) {
		if (IncidentLight.hasOwnProperty(i) && TransmittedLight.hasOwnProperty(i)) {
			Transmission[i] = (TransmittedLight[i] / IncidentLight[i]).toFixed(6);
		}
	}
	return(Transmission);
}

function Transmission2Absorbance(Transmission) {
	let Absorbance = {};
	for (var i in Transmission) {
		if (Transmission.hasOwnProperty(i)) {
			Absorbance[i] = (Math.log10(1 / Transmission[i])).toFixed(6);
		}
	}
	return(Absorbance);
}

function Absorbance2SAC(Absorbance, Thickness) {
	let SAC = {};
	for (var i in Absorbance) {
		if (Absorbance.hasOwnProperty(i)) {
			SAC[i] = (Absorbance[i] / Thickness * 100).toFixed(6);
		}
	}
	return(SAC);
}

function Transmission2XYZ(Transmission) {
	let XYZ = {};

	if (SourceWhite.SPD != "") {
		var SPD = window[SourceWhite.SPD];

		var StdObs = window[SourceWhite.StdObs];
		var StdObsX = 0;
		var StdObsY = 1;
		var StdObsZ = 2;

		var StdObsStart = parseFloat(FirstObjectKey(StdObs));
		var StdObsEnd = parseFloat(LastObjectKey(StdObs));
		var k = 0;

		// Normalizing Constant
		for (var i in SPD) {
			if (SPD.hasOwnProperty(i) && StdObs.hasOwnProperty(i)) {
				k += SPD[i] / 100 * StdObs[i][1] * WaveLengthIncrement;
			}
		}
		k = 100 / k;

		if (!isEmpty(Transmission)) {
			var wa = StdObsStart;
			var wp = StdObsStart;
			var tc = 0;

			for (var i in SPD) {
				if (SPD.hasOwnProperty(i) && StdObs.hasOwnProperty(i) && Transmission.hasOwnProperty(i)) {
					tc++;
					if (tc == 1) {
						XYZ.X =  (RangeLoop(StdObsStart, StdObsStart, SPD, StdObs, StdObsX, k) + RangeLoop(StdObsStart, i-WaveLengthIncrement, SPD, StdObs, StdObsX, k)) / 2;
						XYZ.Y =  (RangeLoop(StdObsStart, StdObsStart, SPD, StdObs, StdObsY, k) + RangeLoop(StdObsStart, i-WaveLengthIncrement, SPD, StdObs, StdObsY, k)) / 2;
						XYZ.Z =  (RangeLoop(StdObsStart, StdObsStart, SPD, StdObs, StdObsZ, k) + RangeLoop(StdObsStart, i-WaveLengthIncrement, SPD, StdObs, StdObsZ, k)) / 2;
					} else if (tc == 2) {
						XYZ.X += (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsX, k) + RangeLoop(wa, i-WaveLengthIncrement, SPD, StdObs, StdObsX, k)) / 2 * Transmission[wa];
						XYZ.Y += (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsY, k) + RangeLoop(wa, i-WaveLengthIncrement, SPD, StdObs, StdObsY, k)) / 2 * Transmission[wa];
						XYZ.Z += (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsZ, k) + RangeLoop(wa, i-WaveLengthIncrement, SPD, StdObs, StdObsZ, k)) / 2 * Transmission[wa];
						tc = 1;
					}
					wp = wa;
					wa = parseFloat(i);
				}
			}

			XYZ.X +=  (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsX, k) + RangeLoop(wa, StdObsEnd-WaveLengthIncrement, SPD, StdObs, StdObsX, k)) / 2;
			XYZ.Y +=  (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsY, k) + RangeLoop(wa, StdObsEnd-WaveLengthIncrement, SPD, StdObs, StdObsY, k)) / 2;
			XYZ.Z +=  (RangeLoop(wp+WaveLengthIncrement, wa, SPD, StdObs, StdObsZ, k) + RangeLoop(wa, StdObsEnd-WaveLengthIncrement, SPD, StdObs, StdObsZ, k)) / 2;

			XYZ.X +=  (RangeLoop(wa+WaveLengthIncrement, StdObsEnd, SPD, StdObs, StdObsX, k) + RangeLoop(StdObsEnd, StdObsEnd, SPD, StdObs, StdObsX, k)) / 2;
			XYZ.Y +=  (RangeLoop(wa+WaveLengthIncrement, StdObsEnd, SPD, StdObs, StdObsY, k) + RangeLoop(StdObsEnd, StdObsEnd, SPD, StdObs, StdObsY, k)) / 2;
			XYZ.Z +=  (RangeLoop(wa+WaveLengthIncrement, StdObsEnd, SPD, StdObs, StdObsZ, k) + RangeLoop(StdObsEnd, StdObsEnd, SPD, StdObs, StdObsZ, k)) / 2;
		} else {
			XYZ.X = RangeLoop(StdObsStart, StdObsEnd, SPD, StdObs, StdObsX, k);
			XYZ.Y = RangeLoop(StdObsStart, StdObsEnd, SPD, StdObs, StdObsY, k);
			XYZ.Z = RangeLoop(StdObsStart, StdObsEnd, SPD, StdObs, StdObsZ, k);
		}
	} else {
		XYZ = {
			Source: "No SPD data"
		}
	}
//xyY2SPD();
	return(CheckXYZ(XYZ));
}

function RangeLoop(Start, Stop, SPD, StdObs, StdObsID, k) {
	var XYZIncrement = 0;
	for (var i = Start; i <= Stop; i += WaveLengthIncrement) {
		XYZIncrement += k * SPD[i] / 10000 * StdObs[i][StdObsID] * WaveLengthIncrement;
	}
	return(XYZIncrement);
}

function xyY2SPD() {
	let SPD = {};

	if (SourceWhite.x != "") {
		var x = SourceWhite.x;
		var y = SourceWhite.y;

		var M = 0.0241 + 0.2562 * x - 0.7341 * y;
		var M1 = ( -1.3515 -  1.7703 * x +  5.9114 * y ) / M;
		var M2 = (  0.0300 - 31.4424 * x + 30.0717 * y ) / M;

		for (var i in SPD_CIE_Illuminant_D_Series) {
			if (SPD_CIE_Illuminant_D_Series.hasOwnProperty(i)) {
				SPD[i] = SPD_CIE_Illuminant_D_Series[i][0] + SPD_CIE_Illuminant_D_Series[i][1] * M1 + SPD_CIE_Illuminant_D_Series[i][2] * M2;
			}
		}
	} else {
		XYZ = {
			Source: "No Source White data"
		}
	}
	return(SPD);
}

function ScaleXYZ(XYZ, SelectedScaling) {
	var Scale;
	var Digits;
	if (SelectedScaling.includes('1')) {
		Scale = 100;
		Digits = 4;
	} else {
		Scale = 1;
		Digits = 6;
	}

	XYZ.X = parseFloat((Scale * XYZ.X).toFixed(Digits));
	XYZ.Y = parseFloat((Scale * XYZ.Y).toFixed(Digits));
	XYZ.Z = parseFloat((Scale * XYZ.Z).toFixed(Digits));
	return(XYZ);
}

function ScalexyY(xyY, SelectedScaling) {
	var Scale;
	var Digits;

	if (SelectedScaling.includes('2')) {
		Scale = 100;
		Digits = 4;
	} else {
		Scale = 1;
		Digits = 6;
	}

	xyY.x = parseFloat((xyY.x).toFixed(6));
	xyY.y = parseFloat((xyY.y).toFixed(6));
	xyY.Y = parseFloat((Scale * xyY.Y).toFixed(Digits));
	return(xyY);
}

function ScaleRGB(RGB, SelectedScaling) {
	var Scale;
	var Digits;

	if (SelectedScaling.includes('3')) {
		Scale = 255;
		Digits = 4;
	} else {
		Scale = 1;
		Digits = 6;
	}

	RGB.R = parseFloat((Scale * RGB.R).toFixed(Digits));
	RGB.G = parseFloat((Scale * RGB.G).toFixed(Digits));
	RGB.B = parseFloat((Scale * RGB.B).toFixed(Digits));
	return(RGB);
}

function isEmpty(obj) {
	return Object.keys(obj).length === 0;
}

function FirstObjectKey(obj) {
	for (var i in obj) {
		if (obj.hasOwnProperty(i)) {
			return(`${i}`);
		}
	}
}

function LastObjectKey(obj) {
	for (var i in obj) {}
	if (obj.hasOwnProperty(i)) {
		return(`${i}`);
	}
}